// automatically generated by the FlatBuffers compiler, do not modify

namespace BehaveAsSakura.Serialization
{

using System;
using FlatBuffers;

enum BehaveAsSakura__Variables__VariableType : byte
{
 Byte = 0,
 SByte = 1,
 Short = 2,
 UShort = 3,
 Integer = 4,
 UInteger = 5,
 Long = 6,
 ULong = 7,
 Float = 8,
 Double = 9,
 String = 10,
};

enum BehaveAsSakura__Variables__VariableSource : byte
{
 GlobalConstant = 0,
 TreeOwnerProperty = 1,
 TaskSharedVariable = 2,
 LiteralConstant = 3,
};

enum BehaveAsSakura__Utils__ComparisonOperator : byte
{
 Equal = 0,
 NotEqual = 1,
 GreaterThan = 2,
 GreaterThanOrEqual = 3,
 LessThan = 4,
 LessThanOrEqual = 5,
};

enum BehaveAsSakura__Tasks__TaskResult : byte
{
 Running = 0,
 Success = 1,
 Failure = 2,
};

enum BehaveAsSakura__Tasks__TaskState : byte
{
 Suspend = 0,
 WaitForStart = 1,
 WaitForUpdate = 2,
 WaitForAbort = 3,
 WaitForEnqueue = 4,
};

enum BehaveAsSakura__Events__IEvent : byte
{
 NONE = 0,
 BehaveAsSakura__Events__SimpleEventTriggeredEvent = 1,
 BehaveAsSakura__Events__TimerTriggeredEvent = 2,
};

enum BehaveAsSakura__Tasks__ITaskDesc : byte
{
 NONE = 0,
 BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc = 1,
 BehaveAsSakura__Tasks__InverterTaskDesc = 2,
 BehaveAsSakura__Tasks__ListenEventTaskDesc = 3,
 BehaveAsSakura__Tasks__LogTaskDesc = 4,
 BehaveAsSakura__Tasks__ParallelSelectorTaskDesc = 5,
 BehaveAsSakura__Tasks__ParallelTaskDesc = 6,
 BehaveAsSakura__Tasks__RepeaterTaskDesc = 7,
 BehaveAsSakura__Tasks__ReturnFailureTaskDesc = 8,
 BehaveAsSakura__Tasks__ReturnSuccessTaskDesc = 9,
 BehaveAsSakura__Tasks__SelectorTaskDesc = 10,
 BehaveAsSakura__Tasks__SendEventTaskDesc = 11,
 BehaveAsSakura__Tasks__SequenceTaskDesc = 12,
 BehaveAsSakura__Tasks__SubTreeTaskDesc = 13,
 BehaveAsSakura__Tasks__UntilFailureDesc = 14,
 BehaveAsSakura__Tasks__UntilSuccessDesc = 15,
 BehaveAsSakura__Tasks__WaitEventTaskDesc = 16,
 BehaveAsSakura__Tasks__WaitTimerTaskDesc = 17,
};

enum BehaveAsSakura__Tasks__ITaskProps : byte
{
 NONE = 0,
 BehaveAsSakura__Tasks__ListenEventTaskProps = 1,
 BehaveAsSakura__Tasks__RepeaterTaskProps = 2,
 BehaveAsSakura__Tasks__SequenceTaskProps = 3,
 BehaveAsSakura__Tasks__SubTreeTaskProps = 4,
 BehaveAsSakura__Tasks__WaitEventTaskProps = 5,
 BehaveAsSakura__Tasks__WaitTimerTaskProps = 6,
};

enum BehaveAsSakura__Tasks__TaskDescWrapper : byte
{
 NONE = 0,
 BehaveAsSakura__Tasks__LeafTaskDescWrapper = 1,
 BehaveAsSakura__Tasks__DecoratorTaskDescWrapper = 2,
 BehaveAsSakura__Tasks__CompositeTaskDescWrapper = 3,
};

struct BehaveAsSakura__Events__IEvent__UnionWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Events__IEvent__UnionWrapper GetRootAsBehaveAsSakura__Events__IEvent__UnionWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Events__IEvent__UnionWrapper(_bb, new BehaveAsSakura__Events__IEvent__UnionWrapper()); }
  public static BehaveAsSakura__Events__IEvent__UnionWrapper GetRootAsBehaveAsSakura__Events__IEvent__UnionWrapper(ByteBuffer _bb, BehaveAsSakura__Events__IEvent__UnionWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Events__IEvent__UnionWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Events__IEvent BodyType { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Events__IEvent)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Events__IEvent.NONE; } }
  public TTable? Body<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Events__IEvent__UnionWrapper> CreateBehaveAsSakura__Events__IEvent__UnionWrapper(FlatBufferBuilder builder,
      BehaveAsSakura__Events__IEvent body_type = BehaveAsSakura__Events__IEvent.NONE,
      int bodyOffset = 0) {
    builder.StartObject(2);
    BehaveAsSakura__Events__IEvent__UnionWrapper.AddBody(builder, bodyOffset);
    BehaveAsSakura__Events__IEvent__UnionWrapper.AddBodyType(builder, body_type);
    return BehaveAsSakura__Events__IEvent__UnionWrapper.EndBehaveAsSakura__Events__IEvent__UnionWrapper(builder);
  }

  public static void StartBehaveAsSakura__Events__IEvent__UnionWrapper(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBodyType(FlatBufferBuilder builder, BehaveAsSakura__Events__IEvent bodyType) { builder.AddByte(0, (byte)bodyType, 0); }
  public static void AddBody(FlatBufferBuilder builder, int bodyOffset) { builder.AddOffset(1, bodyOffset, 0); }
  public static Offset<BehaveAsSakura__Events__IEvent__UnionWrapper> EndBehaveAsSakura__Events__IEvent__UnionWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Events__IEvent__UnionWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper GetRootAsBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(_bb, new BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper()); }
  public static BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper GetRootAsBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Tasks__ITaskDesc BodyType { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Tasks__ITaskDesc)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskDesc.NONE; } }
  public TTable? Body<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper> CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(FlatBufferBuilder builder,
      BehaveAsSakura__Tasks__ITaskDesc body_type = BehaveAsSakura__Tasks__ITaskDesc.NONE,
      int bodyOffset = 0) {
    builder.StartObject(2);
    BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.AddBody(builder, bodyOffset);
    BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.AddBodyType(builder, body_type);
    return BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.EndBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBodyType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskDesc bodyType) { builder.AddByte(0, (byte)bodyType, 0); }
  public static void AddBody(FlatBufferBuilder builder, int bodyOffset) { builder.AddOffset(1, bodyOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper> EndBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__ITaskProps__UnionWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ITaskProps__UnionWrapper GetRootAsBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(_bb, new BehaveAsSakura__Tasks__ITaskProps__UnionWrapper()); }
  public static BehaveAsSakura__Tasks__ITaskProps__UnionWrapper GetRootAsBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__ITaskProps__UnionWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ITaskProps__UnionWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Tasks__ITaskProps BodyType { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Tasks__ITaskProps)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskProps.NONE; } }
  public TTable? Body<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__ITaskProps__UnionWrapper> CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(FlatBufferBuilder builder,
      BehaveAsSakura__Tasks__ITaskProps body_type = BehaveAsSakura__Tasks__ITaskProps.NONE,
      int bodyOffset = 0) {
    builder.StartObject(2);
    BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.AddBody(builder, bodyOffset);
    BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.AddBodyType(builder, body_type);
    return BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.EndBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBodyType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskProps bodyType) { builder.AddByte(0, (byte)bodyType, 0); }
  public static void AddBody(FlatBufferBuilder builder, int bodyOffset) { builder.AddOffset(1, bodyOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__ITaskProps__UnionWrapper> EndBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ITaskProps__UnionWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper GetRootAsBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(_bb, new BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper()); }
  public static BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper GetRootAsBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Tasks__TaskDescWrapper BodyType { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Tasks__TaskDescWrapper)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__TaskDescWrapper.NONE; } }
  public TTable? Body<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper> CreateBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(FlatBufferBuilder builder,
      BehaveAsSakura__Tasks__TaskDescWrapper body_type = BehaveAsSakura__Tasks__TaskDescWrapper.NONE,
      int bodyOffset = 0) {
    builder.StartObject(2);
    BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.AddBody(builder, bodyOffset);
    BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.AddBodyType(builder, body_type);
    return BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.EndBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBodyType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__TaskDescWrapper bodyType) { builder.AddByte(0, (byte)bodyType, 0); }
  public static void AddBody(FlatBufferBuilder builder, int bodyOffset) { builder.AddOffset(1, bodyOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper> EndBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper>(o);
  }
};

struct BehaveAsSakura__BehaviorTreeDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__BehaviorTreeDesc GetRootAsBehaveAsSakura__BehaviorTreeDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__BehaviorTreeDesc(_bb, new BehaveAsSakura__BehaviorTreeDesc()); }
  public static BehaveAsSakura__BehaviorTreeDesc GetRootAsBehaveAsSakura__BehaviorTreeDesc(ByteBuffer _bb, BehaveAsSakura__BehaviorTreeDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__BehaviorTreeDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper? Tasks(int j) { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper?)(new BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TasksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public uint RootTaskId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__BehaviorTreeDesc> CreateBehaveAsSakura__BehaviorTreeDesc(FlatBufferBuilder builder,
      VectorOffset tasksOffset = default(VectorOffset),
      uint rootTaskId = 0) {
    builder.StartObject(2);
    BehaveAsSakura__BehaviorTreeDesc.AddRootTaskId(builder, rootTaskId);
    BehaveAsSakura__BehaviorTreeDesc.AddTasks(builder, tasksOffset);
    return BehaveAsSakura__BehaviorTreeDesc.EndBehaveAsSakura__BehaviorTreeDesc(builder);
  }

  public static void StartBehaveAsSakura__BehaviorTreeDesc(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTasks(FlatBufferBuilder builder, VectorOffset tasksOffset) { builder.AddOffset(0, tasksOffset.Value, 0); }
  public static VectorOffset CreateTasksVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTasksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddRootTaskId(FlatBufferBuilder builder, uint rootTaskId) { builder.AddUint(1, rootTaskId, 0); }
  public static Offset<BehaveAsSakura__BehaviorTreeDesc> EndBehaveAsSakura__BehaviorTreeDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__BehaviorTreeDesc>(o);
  }
};

struct BehaveAsSakura__BehaviorTreeProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__BehaviorTreeProps GetRootAsBehaveAsSakura__BehaviorTreeProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__BehaviorTreeProps(_bb, new BehaveAsSakura__BehaviorTreeProps()); }
  public static BehaveAsSakura__BehaviorTreeProps GetRootAsBehaveAsSakura__BehaviorTreeProps(ByteBuffer _bb, BehaveAsSakura__BehaviorTreeProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__BehaviorTreeProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Events__EventBusProps? EventBus { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Events__EventBusProps?)(new BehaveAsSakura__Events__EventBusProps()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public BehaveAsSakura__Timers__TimerManagerProps? TimerManager { get { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Timers__TimerManagerProps?)(new BehaveAsSakura__Timers__TimerManagerProps()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public BehaveAsSakura__Tasks__TaskPropsWrapper? Tasks(int j) { int o = __p.__offset(8); return o != 0 ? (BehaveAsSakura__Tasks__TaskPropsWrapper?)(new BehaveAsSakura__Tasks__TaskPropsWrapper()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TasksLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BehaveAsSakura__BehaviorTreeProps> CreateBehaveAsSakura__BehaviorTreeProps(FlatBufferBuilder builder,
      Offset<BehaveAsSakura__Events__EventBusProps> eventBusOffset = default(Offset<BehaveAsSakura__Events__EventBusProps>),
      Offset<BehaveAsSakura__Timers__TimerManagerProps> timerManagerOffset = default(Offset<BehaveAsSakura__Timers__TimerManagerProps>),
      VectorOffset tasksOffset = default(VectorOffset)) {
    builder.StartObject(3);
    BehaveAsSakura__BehaviorTreeProps.AddTasks(builder, tasksOffset);
    BehaveAsSakura__BehaviorTreeProps.AddTimerManager(builder, timerManagerOffset);
    BehaveAsSakura__BehaviorTreeProps.AddEventBus(builder, eventBusOffset);
    return BehaveAsSakura__BehaviorTreeProps.EndBehaveAsSakura__BehaviorTreeProps(builder);
  }

  public static void StartBehaveAsSakura__BehaviorTreeProps(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddEventBus(FlatBufferBuilder builder, Offset<BehaveAsSakura__Events__EventBusProps> eventBusOffset) { builder.AddOffset(0, eventBusOffset.Value, 0); }
  public static void AddTimerManager(FlatBufferBuilder builder, Offset<BehaveAsSakura__Timers__TimerManagerProps> timerManagerOffset) { builder.AddOffset(1, timerManagerOffset.Value, 0); }
  public static void AddTasks(FlatBufferBuilder builder, VectorOffset tasksOffset) { builder.AddOffset(2, tasksOffset.Value, 0); }
  public static VectorOffset CreateTasksVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Tasks__TaskPropsWrapper>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTasksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__BehaviorTreeProps> EndBehaveAsSakura__BehaviorTreeProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__BehaviorTreeProps>(o);
  }
};

struct BehaveAsSakura__Variables__VariableDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Variables__VariableDesc GetRootAsBehaveAsSakura__Variables__VariableDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Variables__VariableDesc(_bb, new BehaveAsSakura__Variables__VariableDesc()); }
  public static BehaveAsSakura__Variables__VariableDesc GetRootAsBehaveAsSakura__Variables__VariableDesc(ByteBuffer _bb, BehaveAsSakura__Variables__VariableDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Variables__VariableDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Variables__VariableType Type { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Variables__VariableType)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Variables__VariableType.Byte; } }
  public BehaveAsSakura__Variables__VariableSource Source { get { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Variables__VariableSource)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Variables__VariableSource.GlobalConstant; } }
  public string Value { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetValueBytes() { return __p.__vector_as_arraysegment(8); }

  public static Offset<BehaveAsSakura__Variables__VariableDesc> CreateBehaveAsSakura__Variables__VariableDesc(FlatBufferBuilder builder,
      BehaveAsSakura__Variables__VariableType type = BehaveAsSakura__Variables__VariableType.Byte,
      BehaveAsSakura__Variables__VariableSource source = BehaveAsSakura__Variables__VariableSource.GlobalConstant,
      StringOffset valueOffset = default(StringOffset)) {
    builder.StartObject(3);
    BehaveAsSakura__Variables__VariableDesc.AddValue(builder, valueOffset);
    BehaveAsSakura__Variables__VariableDesc.AddSource(builder, source);
    BehaveAsSakura__Variables__VariableDesc.AddType(builder, type);
    return BehaveAsSakura__Variables__VariableDesc.EndBehaveAsSakura__Variables__VariableDesc(builder);
  }

  public static void StartBehaveAsSakura__Variables__VariableDesc(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddType(FlatBufferBuilder builder, BehaveAsSakura__Variables__VariableType type) { builder.AddByte(0, (byte)type, 0); }
  public static void AddSource(FlatBufferBuilder builder, BehaveAsSakura__Variables__VariableSource source) { builder.AddByte(1, (byte)source, 0); }
  public static void AddValue(FlatBufferBuilder builder, StringOffset valueOffset) { builder.AddOffset(2, valueOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Variables__VariableDesc> EndBehaveAsSakura__Variables__VariableDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Variables__VariableDesc>(o);
  }
};

struct BehaveAsSakura__Variables__VariableSetProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Variables__VariableSetProps GetRootAsBehaveAsSakura__Variables__VariableSetProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Variables__VariableSetProps(_bb, new BehaveAsSakura__Variables__VariableSetProps()); }
  public static BehaveAsSakura__Variables__VariableSetProps GetRootAsBehaveAsSakura__Variables__VariableSetProps(ByteBuffer _bb, BehaveAsSakura__Variables__VariableSetProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Variables__VariableSetProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Variables__NamedVariableDesc? Variables(int j) { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Variables__NamedVariableDesc?)(new BehaveAsSakura__Variables__NamedVariableDesc()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int VariablesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BehaveAsSakura__Variables__VariableSetProps> CreateBehaveAsSakura__Variables__VariableSetProps(FlatBufferBuilder builder,
      VectorOffset variablesOffset = default(VectorOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Variables__VariableSetProps.AddVariables(builder, variablesOffset);
    return BehaveAsSakura__Variables__VariableSetProps.EndBehaveAsSakura__Variables__VariableSetProps(builder);
  }

  public static void StartBehaveAsSakura__Variables__VariableSetProps(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddVariables(FlatBufferBuilder builder, VectorOffset variablesOffset) { builder.AddOffset(0, variablesOffset.Value, 0); }
  public static VectorOffset CreateVariablesVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__NamedVariableDesc>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartVariablesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__Variables__VariableSetProps> EndBehaveAsSakura__Variables__VariableSetProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Variables__VariableSetProps>(o);
  }
};

struct BehaveAsSakura__Variables__NamedVariableDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Variables__NamedVariableDesc GetRootAsBehaveAsSakura__Variables__NamedVariableDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Variables__NamedVariableDesc(_bb, new BehaveAsSakura__Variables__NamedVariableDesc()); }
  public static BehaveAsSakura__Variables__NamedVariableDesc GetRootAsBehaveAsSakura__Variables__NamedVariableDesc(ByteBuffer _bb, BehaveAsSakura__Variables__NamedVariableDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Variables__NamedVariableDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
  public BehaveAsSakura__Variables__VariableDesc? Desc { get { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BehaveAsSakura__Variables__NamedVariableDesc> CreateBehaveAsSakura__Variables__NamedVariableDesc(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      Offset<BehaveAsSakura__Variables__VariableDesc> descOffset = default(Offset<BehaveAsSakura__Variables__VariableDesc>)) {
    builder.StartObject(2);
    BehaveAsSakura__Variables__NamedVariableDesc.AddDesc(builder, descOffset);
    BehaveAsSakura__Variables__NamedVariableDesc.AddName(builder, nameOffset);
    return BehaveAsSakura__Variables__NamedVariableDesc.EndBehaveAsSakura__Variables__NamedVariableDesc(builder);
  }

  public static void StartBehaveAsSakura__Variables__NamedVariableDesc(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddDesc(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc> descOffset) { builder.AddOffset(1, descOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Variables__NamedVariableDesc> EndBehaveAsSakura__Variables__NamedVariableDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Variables__NamedVariableDesc>(o);
  }
};

struct BehaveAsSakura__Timers__TimerProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Timers__TimerProps GetRootAsBehaveAsSakura__Timers__TimerProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Timers__TimerProps(_bb, new BehaveAsSakura__Timers__TimerProps()); }
  public static BehaveAsSakura__Timers__TimerProps GetRootAsBehaveAsSakura__Timers__TimerProps(ByteBuffer _bb, BehaveAsSakura__Timers__TimerProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Timers__TimerProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint TotalTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint EndTime { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Timers__TimerProps> CreateBehaveAsSakura__Timers__TimerProps(FlatBufferBuilder builder,
      uint id = 0,
      uint totalTime = 0,
      uint endTime = 0) {
    builder.StartObject(3);
    BehaveAsSakura__Timers__TimerProps.AddEndTime(builder, endTime);
    BehaveAsSakura__Timers__TimerProps.AddTotalTime(builder, totalTime);
    BehaveAsSakura__Timers__TimerProps.AddId(builder, id);
    return BehaveAsSakura__Timers__TimerProps.EndBehaveAsSakura__Timers__TimerProps(builder);
  }

  public static void StartBehaveAsSakura__Timers__TimerProps(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddTotalTime(FlatBufferBuilder builder, uint totalTime) { builder.AddUint(1, totalTime, 0); }
  public static void AddEndTime(FlatBufferBuilder builder, uint endTime) { builder.AddUint(2, endTime, 0); }
  public static Offset<BehaveAsSakura__Timers__TimerProps> EndBehaveAsSakura__Timers__TimerProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Timers__TimerProps>(o);
  }
};

struct BehaveAsSakura__Timers__TimerManagerProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Timers__TimerManagerProps GetRootAsBehaveAsSakura__Timers__TimerManagerProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Timers__TimerManagerProps(_bb, new BehaveAsSakura__Timers__TimerManagerProps()); }
  public static BehaveAsSakura__Timers__TimerManagerProps GetRootAsBehaveAsSakura__Timers__TimerManagerProps(ByteBuffer _bb, BehaveAsSakura__Timers__TimerManagerProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Timers__TimerManagerProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint MaxTimerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public BehaveAsSakura__Timers__TimerProps? Timers(int j) { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Timers__TimerProps?)(new BehaveAsSakura__Timers__TimerProps()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TimersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BehaveAsSakura__Timers__TimerManagerProps> CreateBehaveAsSakura__Timers__TimerManagerProps(FlatBufferBuilder builder,
      uint maxTimerId = 0,
      VectorOffset timersOffset = default(VectorOffset)) {
    builder.StartObject(2);
    BehaveAsSakura__Timers__TimerManagerProps.AddTimers(builder, timersOffset);
    BehaveAsSakura__Timers__TimerManagerProps.AddMaxTimerId(builder, maxTimerId);
    return BehaveAsSakura__Timers__TimerManagerProps.EndBehaveAsSakura__Timers__TimerManagerProps(builder);
  }

  public static void StartBehaveAsSakura__Timers__TimerManagerProps(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMaxTimerId(FlatBufferBuilder builder, uint maxTimerId) { builder.AddUint(0, maxTimerId, 0); }
  public static void AddTimers(FlatBufferBuilder builder, VectorOffset timersOffset) { builder.AddOffset(1, timersOffset.Value, 0); }
  public static VectorOffset CreateTimersVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Timers__TimerProps>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartTimersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__Timers__TimerManagerProps> EndBehaveAsSakura__Timers__TimerManagerProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Timers__TimerManagerProps>(o);
  }
};

struct BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc GetRootAsBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(_bb, new BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc()); }
  public static BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc GetRootAsBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Variables__VariableDesc? Left { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public BehaveAsSakura__Utils__ComparisonOperator Op { get { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Utils__ComparisonOperator)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Utils__ComparisonOperator.Equal; } }
  public BehaveAsSakura__Variables__VariableDesc? Right { get { int o = __p.__offset(8); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc> CreateBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(FlatBufferBuilder builder,
      Offset<BehaveAsSakura__Variables__VariableDesc> leftOffset = default(Offset<BehaveAsSakura__Variables__VariableDesc>),
      BehaveAsSakura__Utils__ComparisonOperator op = BehaveAsSakura__Utils__ComparisonOperator.Equal,
      Offset<BehaveAsSakura__Variables__VariableDesc> rightOffset = default(Offset<BehaveAsSakura__Variables__VariableDesc>)) {
    builder.StartObject(3);
    BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddRight(builder, rightOffset);
    BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddLeft(builder, leftOffset);
    BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddOp(builder, op);
    return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.EndBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddLeft(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc> leftOffset) { builder.AddOffset(0, leftOffset.Value, 0); }
  public static void AddOp(FlatBufferBuilder builder, BehaveAsSakura__Utils__ComparisonOperator op) { builder.AddByte(1, (byte)op, 0); }
  public static void AddRight(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc> rightOffset) { builder.AddOffset(2, rightOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc> EndBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__DecoratorTaskDescWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__DecoratorTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(_bb, new BehaveAsSakura__Tasks__DecoratorTaskDescWrapper()); }
  public static BehaveAsSakura__Tasks__DecoratorTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__DecoratorTaskDescWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__DecoratorTaskDescWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ChildTaskId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string Comment { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(10); }
  public BehaveAsSakura__Tasks__ITaskDesc CustomDescType { get { int o = __p.__offset(12); return o != 0 ? (BehaveAsSakura__Tasks__ITaskDesc)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskDesc.NONE; } }
  public TTable? CustomDesc<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__DecoratorTaskDescWrapper> CreateBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(FlatBufferBuilder builder,
      uint childTaskId = 0,
      uint id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset commentOffset = default(StringOffset),
      BehaveAsSakura__Tasks__ITaskDesc customDesc_type = BehaveAsSakura__Tasks__ITaskDesc.NONE,
      int customDescOffset = 0) {
    builder.StartObject(6);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddCustomDesc(builder, customDescOffset);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddComment(builder, commentOffset);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddName(builder, nameOffset);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddId(builder, id);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddChildTaskId(builder, childTaskId);
    BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddCustomDescType(builder, customDesc_type);
    return BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.EndBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddChildTaskId(FlatBufferBuilder builder, uint childTaskId) { builder.AddUint(0, childTaskId, 0); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(3, commentOffset.Value, 0); }
  public static void AddCustomDescType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskDesc customDescType) { builder.AddByte(4, (byte)customDescType, 0); }
  public static void AddCustomDesc(FlatBufferBuilder builder, int customDescOffset) { builder.AddOffset(5, customDescOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__DecoratorTaskDescWrapper> EndBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__DecoratorTaskDescWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__CompositeTaskDescWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__CompositeTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__CompositeTaskDescWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__CompositeTaskDescWrapper(_bb, new BehaveAsSakura__Tasks__CompositeTaskDescWrapper()); }
  public static BehaveAsSakura__Tasks__CompositeTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__CompositeTaskDescWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__CompositeTaskDescWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__CompositeTaskDescWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint ChildTaskIds(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int ChildTaskIdsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetChildTaskIdsBytes() { return __p.__vector_as_arraysegment(4); }
  public uint Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(8); }
  public string Comment { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(10); }
  public BehaveAsSakura__Tasks__ITaskDesc CustomDescType { get { int o = __p.__offset(12); return o != 0 ? (BehaveAsSakura__Tasks__ITaskDesc)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskDesc.NONE; } }
  public TTable? CustomDesc<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__CompositeTaskDescWrapper> CreateBehaveAsSakura__Tasks__CompositeTaskDescWrapper(FlatBufferBuilder builder,
      VectorOffset childTaskIdsOffset = default(VectorOffset),
      uint id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset commentOffset = default(StringOffset),
      BehaveAsSakura__Tasks__ITaskDesc customDesc_type = BehaveAsSakura__Tasks__ITaskDesc.NONE,
      int customDescOffset = 0) {
    builder.StartObject(6);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddCustomDesc(builder, customDescOffset);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddComment(builder, commentOffset);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddName(builder, nameOffset);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddId(builder, id);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddChildTaskIds(builder, childTaskIdsOffset);
    BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddCustomDescType(builder, customDesc_type);
    return BehaveAsSakura__Tasks__CompositeTaskDescWrapper.EndBehaveAsSakura__Tasks__CompositeTaskDescWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__CompositeTaskDescWrapper(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddChildTaskIds(FlatBufferBuilder builder, VectorOffset childTaskIdsOffset) { builder.AddOffset(0, childTaskIdsOffset.Value, 0); }
  public static VectorOffset CreateChildTaskIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartChildTaskIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(1, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(2, nameOffset.Value, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(3, commentOffset.Value, 0); }
  public static void AddCustomDescType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskDesc customDescType) { builder.AddByte(4, (byte)customDescType, 0); }
  public static void AddCustomDesc(FlatBufferBuilder builder, int customDescOffset) { builder.AddOffset(5, customDescOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__CompositeTaskDescWrapper> EndBehaveAsSakura__Tasks__CompositeTaskDescWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__CompositeTaskDescWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__InverterTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__InverterTaskDesc GetRootAsBehaveAsSakura__Tasks__InverterTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__InverterTaskDesc(_bb, new BehaveAsSakura__Tasks__InverterTaskDesc()); }
  public static BehaveAsSakura__Tasks__InverterTaskDesc GetRootAsBehaveAsSakura__Tasks__InverterTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__InverterTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__InverterTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__InverterTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__InverterTaskDesc> EndBehaveAsSakura__Tasks__InverterTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__InverterTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__LeafTaskDescWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__LeafTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__LeafTaskDescWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__LeafTaskDescWrapper(_bb, new BehaveAsSakura__Tasks__LeafTaskDescWrapper()); }
  public static BehaveAsSakura__Tasks__LeafTaskDescWrapper GetRootAsBehaveAsSakura__Tasks__LeafTaskDescWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__LeafTaskDescWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__LeafTaskDescWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
  public string Comment { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetCommentBytes() { return __p.__vector_as_arraysegment(8); }
  public BehaveAsSakura__Tasks__ITaskDesc CustomDescType { get { int o = __p.__offset(10); return o != 0 ? (BehaveAsSakura__Tasks__ITaskDesc)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskDesc.NONE; } }
  public TTable? CustomDesc<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__LeafTaskDescWrapper> CreateBehaveAsSakura__Tasks__LeafTaskDescWrapper(FlatBufferBuilder builder,
      uint id = 0,
      StringOffset nameOffset = default(StringOffset),
      StringOffset commentOffset = default(StringOffset),
      BehaveAsSakura__Tasks__ITaskDesc customDesc_type = BehaveAsSakura__Tasks__ITaskDesc.NONE,
      int customDescOffset = 0) {
    builder.StartObject(5);
    BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddCustomDesc(builder, customDescOffset);
    BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddComment(builder, commentOffset);
    BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddName(builder, nameOffset);
    BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddId(builder, id);
    BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddCustomDescType(builder, customDesc_type);
    return BehaveAsSakura__Tasks__LeafTaskDescWrapper.EndBehaveAsSakura__Tasks__LeafTaskDescWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__LeafTaskDescWrapper(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddComment(FlatBufferBuilder builder, StringOffset commentOffset) { builder.AddOffset(2, commentOffset.Value, 0); }
  public static void AddCustomDescType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskDesc customDescType) { builder.AddByte(3, (byte)customDescType, 0); }
  public static void AddCustomDesc(FlatBufferBuilder builder, int customDescOffset) { builder.AddOffset(4, customDescOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__LeafTaskDescWrapper> EndBehaveAsSakura__Tasks__LeafTaskDescWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__LeafTaskDescWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__ListenEventTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ListenEventTaskDesc GetRootAsBehaveAsSakura__Tasks__ListenEventTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ListenEventTaskDesc(_bb, new BehaveAsSakura__Tasks__ListenEventTaskDesc()); }
  public static BehaveAsSakura__Tasks__ListenEventTaskDesc GetRootAsBehaveAsSakura__Tasks__ListenEventTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ListenEventTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ListenEventTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<BehaveAsSakura__Tasks__ListenEventTaskDesc> CreateBehaveAsSakura__Tasks__ListenEventTaskDesc(FlatBufferBuilder builder,
      StringOffset eventTypeOffset = default(StringOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__ListenEventTaskDesc.AddEventType(builder, eventTypeOffset);
    return BehaveAsSakura__Tasks__ListenEventTaskDesc.EndBehaveAsSakura__Tasks__ListenEventTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__ListenEventTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(0, eventTypeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__ListenEventTaskDesc> EndBehaveAsSakura__Tasks__ListenEventTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ListenEventTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__ListenEventTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ListenEventTaskProps GetRootAsBehaveAsSakura__Tasks__ListenEventTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ListenEventTaskProps(_bb, new BehaveAsSakura__Tasks__ListenEventTaskProps()); }
  public static BehaveAsSakura__Tasks__ListenEventTaskProps GetRootAsBehaveAsSakura__Tasks__ListenEventTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__ListenEventTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ListenEventTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsEventTriggered { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BehaveAsSakura__Tasks__ListenEventTaskProps> CreateBehaveAsSakura__Tasks__ListenEventTaskProps(FlatBufferBuilder builder,
      bool isEventTriggered = false) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__ListenEventTaskProps.AddIsEventTriggered(builder, isEventTriggered);
    return BehaveAsSakura__Tasks__ListenEventTaskProps.EndBehaveAsSakura__Tasks__ListenEventTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__ListenEventTaskProps(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIsEventTriggered(FlatBufferBuilder builder, bool isEventTriggered) { builder.AddBool(0, isEventTriggered, false); }
  public static Offset<BehaveAsSakura__Tasks__ListenEventTaskProps> EndBehaveAsSakura__Tasks__ListenEventTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ListenEventTaskProps>(o);
  }
};

struct BehaveAsSakura__Tasks__LogTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__LogTaskDesc GetRootAsBehaveAsSakura__Tasks__LogTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__LogTaskDesc(_bb, new BehaveAsSakura__Tasks__LogTaskDesc()); }
  public static BehaveAsSakura__Tasks__LogTaskDesc GetRootAsBehaveAsSakura__Tasks__LogTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__LogTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__LogTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Message { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetMessageBytes() { return __p.__vector_as_arraysegment(4); }
  public BehaveAsSakura__Variables__VariableDesc? MessageParameters(int j) { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MessageParametersLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BehaveAsSakura__Tasks__LogTaskDesc> CreateBehaveAsSakura__Tasks__LogTaskDesc(FlatBufferBuilder builder,
      StringOffset messageOffset = default(StringOffset),
      VectorOffset messageParametersOffset = default(VectorOffset)) {
    builder.StartObject(2);
    BehaveAsSakura__Tasks__LogTaskDesc.AddMessageParameters(builder, messageParametersOffset);
    BehaveAsSakura__Tasks__LogTaskDesc.AddMessage(builder, messageOffset);
    return BehaveAsSakura__Tasks__LogTaskDesc.EndBehaveAsSakura__Tasks__LogTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__LogTaskDesc(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddMessage(FlatBufferBuilder builder, StringOffset messageOffset) { builder.AddOffset(0, messageOffset.Value, 0); }
  public static void AddMessageParameters(FlatBufferBuilder builder, VectorOffset messageParametersOffset) { builder.AddOffset(1, messageParametersOffset.Value, 0); }
  public static VectorOffset CreateMessageParametersVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartMessageParametersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__Tasks__LogTaskDesc> EndBehaveAsSakura__Tasks__LogTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__LogTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__ParallelSelectorTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ParallelSelectorTaskDesc GetRootAsBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(_bb, new BehaveAsSakura__Tasks__ParallelSelectorTaskDesc()); }
  public static BehaveAsSakura__Tasks__ParallelSelectorTaskDesc GetRootAsBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ParallelSelectorTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ParallelSelectorTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc> EndBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__ParallelTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ParallelTaskDesc GetRootAsBehaveAsSakura__Tasks__ParallelTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ParallelTaskDesc(_bb, new BehaveAsSakura__Tasks__ParallelTaskDesc()); }
  public static BehaveAsSakura__Tasks__ParallelTaskDesc GetRootAsBehaveAsSakura__Tasks__ParallelTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ParallelTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ParallelTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__ParallelTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__ParallelTaskDesc> EndBehaveAsSakura__Tasks__ParallelTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ParallelTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__RepeaterTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__RepeaterTaskDesc GetRootAsBehaveAsSakura__Tasks__RepeaterTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__RepeaterTaskDesc(_bb, new BehaveAsSakura__Tasks__RepeaterTaskDesc()); }
  public static BehaveAsSakura__Tasks__RepeaterTaskDesc GetRootAsBehaveAsSakura__Tasks__RepeaterTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__RepeaterTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__RepeaterTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Count { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Tasks__RepeaterTaskDesc> CreateBehaveAsSakura__Tasks__RepeaterTaskDesc(FlatBufferBuilder builder,
      uint count = 0) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__RepeaterTaskDesc.AddCount(builder, count);
    return BehaveAsSakura__Tasks__RepeaterTaskDesc.EndBehaveAsSakura__Tasks__RepeaterTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__RepeaterTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCount(FlatBufferBuilder builder, uint count) { builder.AddUint(0, count, 0); }
  public static Offset<BehaveAsSakura__Tasks__RepeaterTaskDesc> EndBehaveAsSakura__Tasks__RepeaterTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__RepeaterTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__RepeaterTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__RepeaterTaskProps GetRootAsBehaveAsSakura__Tasks__RepeaterTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__RepeaterTaskProps(_bb, new BehaveAsSakura__Tasks__RepeaterTaskProps()); }
  public static BehaveAsSakura__Tasks__RepeaterTaskProps GetRootAsBehaveAsSakura__Tasks__RepeaterTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__RepeaterTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__RepeaterTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool WaitForChildCompleted { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public uint LastUpdateTime { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public uint Count { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Tasks__RepeaterTaskProps> CreateBehaveAsSakura__Tasks__RepeaterTaskProps(FlatBufferBuilder builder,
      bool waitForChildCompleted = false,
      uint lastUpdateTime = 0,
      uint count = 0) {
    builder.StartObject(3);
    BehaveAsSakura__Tasks__RepeaterTaskProps.AddCount(builder, count);
    BehaveAsSakura__Tasks__RepeaterTaskProps.AddLastUpdateTime(builder, lastUpdateTime);
    BehaveAsSakura__Tasks__RepeaterTaskProps.AddWaitForChildCompleted(builder, waitForChildCompleted);
    return BehaveAsSakura__Tasks__RepeaterTaskProps.EndBehaveAsSakura__Tasks__RepeaterTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__RepeaterTaskProps(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddWaitForChildCompleted(FlatBufferBuilder builder, bool waitForChildCompleted) { builder.AddBool(0, waitForChildCompleted, false); }
  public static void AddLastUpdateTime(FlatBufferBuilder builder, uint lastUpdateTime) { builder.AddUint(1, lastUpdateTime, 0); }
  public static void AddCount(FlatBufferBuilder builder, uint count) { builder.AddUint(2, count, 0); }
  public static Offset<BehaveAsSakura__Tasks__RepeaterTaskProps> EndBehaveAsSakura__Tasks__RepeaterTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__RepeaterTaskProps>(o);
  }
};

struct BehaveAsSakura__Tasks__ReturnFailureTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ReturnFailureTaskDesc GetRootAsBehaveAsSakura__Tasks__ReturnFailureTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ReturnFailureTaskDesc(_bb, new BehaveAsSakura__Tasks__ReturnFailureTaskDesc()); }
  public static BehaveAsSakura__Tasks__ReturnFailureTaskDesc GetRootAsBehaveAsSakura__Tasks__ReturnFailureTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ReturnFailureTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ReturnFailureTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__ReturnFailureTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__ReturnFailureTaskDesc> EndBehaveAsSakura__Tasks__ReturnFailureTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__ReturnSuccessTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__ReturnSuccessTaskDesc GetRootAsBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(_bb, new BehaveAsSakura__Tasks__ReturnSuccessTaskDesc()); }
  public static BehaveAsSakura__Tasks__ReturnSuccessTaskDesc GetRootAsBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__ReturnSuccessTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__ReturnSuccessTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc> EndBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__SelectorTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SelectorTaskDesc GetRootAsBehaveAsSakura__Tasks__SelectorTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SelectorTaskDesc(_bb, new BehaveAsSakura__Tasks__SelectorTaskDesc()); }
  public static BehaveAsSakura__Tasks__SelectorTaskDesc GetRootAsBehaveAsSakura__Tasks__SelectorTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__SelectorTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SelectorTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__SelectorTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__SelectorTaskDesc> EndBehaveAsSakura__Tasks__SelectorTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SelectorTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__SendEventTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SendEventTaskDesc GetRootAsBehaveAsSakura__Tasks__SendEventTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SendEventTaskDesc(_bb, new BehaveAsSakura__Tasks__SendEventTaskDesc()); }
  public static BehaveAsSakura__Tasks__SendEventTaskDesc GetRootAsBehaveAsSakura__Tasks__SendEventTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__SendEventTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SendEventTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<BehaveAsSakura__Tasks__SendEventTaskDesc> CreateBehaveAsSakura__Tasks__SendEventTaskDesc(FlatBufferBuilder builder,
      StringOffset eventTypeOffset = default(StringOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__SendEventTaskDesc.AddEventType(builder, eventTypeOffset);
    return BehaveAsSakura__Tasks__SendEventTaskDesc.EndBehaveAsSakura__Tasks__SendEventTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__SendEventTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(0, eventTypeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__SendEventTaskDesc> EndBehaveAsSakura__Tasks__SendEventTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SendEventTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__SequenceTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SequenceTaskDesc GetRootAsBehaveAsSakura__Tasks__SequenceTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SequenceTaskDesc(_bb, new BehaveAsSakura__Tasks__SequenceTaskDesc()); }
  public static BehaveAsSakura__Tasks__SequenceTaskDesc GetRootAsBehaveAsSakura__Tasks__SequenceTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__SequenceTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SequenceTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBehaveAsSakura__Tasks__SequenceTaskDesc(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BehaveAsSakura__Tasks__SequenceTaskDesc> EndBehaveAsSakura__Tasks__SequenceTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SequenceTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__SequenceTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SequenceTaskProps GetRootAsBehaveAsSakura__Tasks__SequenceTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SequenceTaskProps(_bb, new BehaveAsSakura__Tasks__SequenceTaskProps()); }
  public static BehaveAsSakura__Tasks__SequenceTaskProps GetRootAsBehaveAsSakura__Tasks__SequenceTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__SequenceTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SequenceTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int CurrentChildIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<BehaveAsSakura__Tasks__SequenceTaskProps> CreateBehaveAsSakura__Tasks__SequenceTaskProps(FlatBufferBuilder builder,
      int currentChildIndex = 0) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__SequenceTaskProps.AddCurrentChildIndex(builder, currentChildIndex);
    return BehaveAsSakura__Tasks__SequenceTaskProps.EndBehaveAsSakura__Tasks__SequenceTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__SequenceTaskProps(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCurrentChildIndex(FlatBufferBuilder builder, int currentChildIndex) { builder.AddInt(0, currentChildIndex, 0); }
  public static Offset<BehaveAsSakura__Tasks__SequenceTaskProps> EndBehaveAsSakura__Tasks__SequenceTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SequenceTaskProps>(o);
  }
};

struct BehaveAsSakura__Tasks__SubTreeTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SubTreeTaskDesc GetRootAsBehaveAsSakura__Tasks__SubTreeTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SubTreeTaskDesc(_bb, new BehaveAsSakura__Tasks__SubTreeTaskDesc()); }
  public static BehaveAsSakura__Tasks__SubTreeTaskDesc GetRootAsBehaveAsSakura__Tasks__SubTreeTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__SubTreeTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SubTreeTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Variables__VariableDesc? SubTreePath { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BehaveAsSakura__Tasks__SubTreeTaskDesc> CreateBehaveAsSakura__Tasks__SubTreeTaskDesc(FlatBufferBuilder builder,
      Offset<BehaveAsSakura__Variables__VariableDesc> subTreePathOffset = default(Offset<BehaveAsSakura__Variables__VariableDesc>)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__SubTreeTaskDesc.AddSubTreePath(builder, subTreePathOffset);
    return BehaveAsSakura__Tasks__SubTreeTaskDesc.EndBehaveAsSakura__Tasks__SubTreeTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__SubTreeTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSubTreePath(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc> subTreePathOffset) { builder.AddOffset(0, subTreePathOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__SubTreeTaskDesc> EndBehaveAsSakura__Tasks__SubTreeTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SubTreeTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__SubTreeTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__SubTreeTaskProps GetRootAsBehaveAsSakura__Tasks__SubTreeTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__SubTreeTaskProps(_bb, new BehaveAsSakura__Tasks__SubTreeTaskProps()); }
  public static BehaveAsSakura__Tasks__SubTreeTaskProps GetRootAsBehaveAsSakura__Tasks__SubTreeTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__SubTreeTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__SubTreeTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__BehaviorTreeProps? SubTree { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__BehaviorTreeProps?)(new BehaveAsSakura__BehaviorTreeProps()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BehaveAsSakura__Tasks__SubTreeTaskProps> CreateBehaveAsSakura__Tasks__SubTreeTaskProps(FlatBufferBuilder builder,
      Offset<BehaveAsSakura__BehaviorTreeProps> subTreeOffset = default(Offset<BehaveAsSakura__BehaviorTreeProps>)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__SubTreeTaskProps.AddSubTree(builder, subTreeOffset);
    return BehaveAsSakura__Tasks__SubTreeTaskProps.EndBehaveAsSakura__Tasks__SubTreeTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__SubTreeTaskProps(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSubTree(FlatBufferBuilder builder, Offset<BehaveAsSakura__BehaviorTreeProps> subTreeOffset) { builder.AddOffset(0, subTreeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__SubTreeTaskProps> EndBehaveAsSakura__Tasks__SubTreeTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__SubTreeTaskProps>(o);
  }
};

struct BehaveAsSakura__Tasks__TaskPropsWrapper : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__TaskPropsWrapper GetRootAsBehaveAsSakura__Tasks__TaskPropsWrapper(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__TaskPropsWrapper(_bb, new BehaveAsSakura__Tasks__TaskPropsWrapper()); }
  public static BehaveAsSakura__Tasks__TaskPropsWrapper GetRootAsBehaveAsSakura__Tasks__TaskPropsWrapper(ByteBuffer _bb, BehaveAsSakura__Tasks__TaskPropsWrapper obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__TaskPropsWrapper __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public BehaveAsSakura__Tasks__TaskState State { get { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Tasks__TaskState)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__TaskState.Suspend; } }
  public BehaveAsSakura__Tasks__TaskResult LastResult { get { int o = __p.__offset(8); return o != 0 ? (BehaveAsSakura__Tasks__TaskResult)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__TaskResult.Running; } }
  public BehaveAsSakura__Variables__VariableSetProps? SharedVariables { get { int o = __p.__offset(10); return o != 0 ? (BehaveAsSakura__Variables__VariableSetProps?)(new BehaveAsSakura__Variables__VariableSetProps()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public BehaveAsSakura__Tasks__ITaskProps CustomPropsType { get { int o = __p.__offset(12); return o != 0 ? (BehaveAsSakura__Tasks__ITaskProps)__p.bb.Get(o + __p.bb_pos) : BehaveAsSakura__Tasks__ITaskProps.NONE; } }
  public TTable? CustomProps<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<BehaveAsSakura__Tasks__TaskPropsWrapper> CreateBehaveAsSakura__Tasks__TaskPropsWrapper(FlatBufferBuilder builder,
      uint id = 0,
      BehaveAsSakura__Tasks__TaskState state = BehaveAsSakura__Tasks__TaskState.Suspend,
      BehaveAsSakura__Tasks__TaskResult lastResult = BehaveAsSakura__Tasks__TaskResult.Running,
      Offset<BehaveAsSakura__Variables__VariableSetProps> sharedVariablesOffset = default(Offset<BehaveAsSakura__Variables__VariableSetProps>),
      BehaveAsSakura__Tasks__ITaskProps customProps_type = BehaveAsSakura__Tasks__ITaskProps.NONE,
      int customPropsOffset = 0) {
    builder.StartObject(6);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddCustomProps(builder, customPropsOffset);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddSharedVariables(builder, sharedVariablesOffset);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddId(builder, id);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddCustomPropsType(builder, customProps_type);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddLastResult(builder, lastResult);
    BehaveAsSakura__Tasks__TaskPropsWrapper.AddState(builder, state);
    return BehaveAsSakura__Tasks__TaskPropsWrapper.EndBehaveAsSakura__Tasks__TaskPropsWrapper(builder);
  }

  public static void StartBehaveAsSakura__Tasks__TaskPropsWrapper(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddId(FlatBufferBuilder builder, uint id) { builder.AddUint(0, id, 0); }
  public static void AddState(FlatBufferBuilder builder, BehaveAsSakura__Tasks__TaskState state) { builder.AddByte(1, (byte)state, 0); }
  public static void AddLastResult(FlatBufferBuilder builder, BehaveAsSakura__Tasks__TaskResult lastResult) { builder.AddByte(2, (byte)lastResult, 0); }
  public static void AddSharedVariables(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableSetProps> sharedVariablesOffset) { builder.AddOffset(3, sharedVariablesOffset.Value, 0); }
  public static void AddCustomPropsType(FlatBufferBuilder builder, BehaveAsSakura__Tasks__ITaskProps customPropsType) { builder.AddByte(4, (byte)customPropsType, 0); }
  public static void AddCustomProps(FlatBufferBuilder builder, int customPropsOffset) { builder.AddOffset(5, customPropsOffset, 0); }
  public static Offset<BehaveAsSakura__Tasks__TaskPropsWrapper> EndBehaveAsSakura__Tasks__TaskPropsWrapper(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__TaskPropsWrapper>(o);
  }
};

struct BehaveAsSakura__Tasks__UntilFailureDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__UntilFailureDesc GetRootAsBehaveAsSakura__Tasks__UntilFailureDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__UntilFailureDesc(_bb, new BehaveAsSakura__Tasks__UntilFailureDesc()); }
  public static BehaveAsSakura__Tasks__UntilFailureDesc GetRootAsBehaveAsSakura__Tasks__UntilFailureDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__UntilFailureDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__UntilFailureDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Count { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Tasks__UntilFailureDesc> CreateBehaveAsSakura__Tasks__UntilFailureDesc(FlatBufferBuilder builder,
      uint count = 0) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__UntilFailureDesc.AddCount(builder, count);
    return BehaveAsSakura__Tasks__UntilFailureDesc.EndBehaveAsSakura__Tasks__UntilFailureDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__UntilFailureDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCount(FlatBufferBuilder builder, uint count) { builder.AddUint(0, count, 0); }
  public static Offset<BehaveAsSakura__Tasks__UntilFailureDesc> EndBehaveAsSakura__Tasks__UntilFailureDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__UntilFailureDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__UntilSuccessDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__UntilSuccessDesc GetRootAsBehaveAsSakura__Tasks__UntilSuccessDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__UntilSuccessDesc(_bb, new BehaveAsSakura__Tasks__UntilSuccessDesc()); }
  public static BehaveAsSakura__Tasks__UntilSuccessDesc GetRootAsBehaveAsSakura__Tasks__UntilSuccessDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__UntilSuccessDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__UntilSuccessDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Count { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Tasks__UntilSuccessDesc> CreateBehaveAsSakura__Tasks__UntilSuccessDesc(FlatBufferBuilder builder,
      uint count = 0) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__UntilSuccessDesc.AddCount(builder, count);
    return BehaveAsSakura__Tasks__UntilSuccessDesc.EndBehaveAsSakura__Tasks__UntilSuccessDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__UntilSuccessDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCount(FlatBufferBuilder builder, uint count) { builder.AddUint(0, count, 0); }
  public static Offset<BehaveAsSakura__Tasks__UntilSuccessDesc> EndBehaveAsSakura__Tasks__UntilSuccessDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__UntilSuccessDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__WaitEventTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__WaitEventTaskDesc GetRootAsBehaveAsSakura__Tasks__WaitEventTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__WaitEventTaskDesc(_bb, new BehaveAsSakura__Tasks__WaitEventTaskDesc()); }
  public static BehaveAsSakura__Tasks__WaitEventTaskDesc GetRootAsBehaveAsSakura__Tasks__WaitEventTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__WaitEventTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__WaitEventTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<BehaveAsSakura__Tasks__WaitEventTaskDesc> CreateBehaveAsSakura__Tasks__WaitEventTaskDesc(FlatBufferBuilder builder,
      StringOffset eventTypeOffset = default(StringOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__WaitEventTaskDesc.AddEventType(builder, eventTypeOffset);
    return BehaveAsSakura__Tasks__WaitEventTaskDesc.EndBehaveAsSakura__Tasks__WaitEventTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__WaitEventTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(0, eventTypeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__WaitEventTaskDesc> EndBehaveAsSakura__Tasks__WaitEventTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__WaitEventTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__WaitEventTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__WaitEventTaskProps GetRootAsBehaveAsSakura__Tasks__WaitEventTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__WaitEventTaskProps(_bb, new BehaveAsSakura__Tasks__WaitEventTaskProps()); }
  public static BehaveAsSakura__Tasks__WaitEventTaskProps GetRootAsBehaveAsSakura__Tasks__WaitEventTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__WaitEventTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__WaitEventTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool IsEventTriggered { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BehaveAsSakura__Tasks__WaitEventTaskProps> CreateBehaveAsSakura__Tasks__WaitEventTaskProps(FlatBufferBuilder builder,
      bool isEventTriggered = false) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__WaitEventTaskProps.AddIsEventTriggered(builder, isEventTriggered);
    return BehaveAsSakura__Tasks__WaitEventTaskProps.EndBehaveAsSakura__Tasks__WaitEventTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__WaitEventTaskProps(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIsEventTriggered(FlatBufferBuilder builder, bool isEventTriggered) { builder.AddBool(0, isEventTriggered, false); }
  public static Offset<BehaveAsSakura__Tasks__WaitEventTaskProps> EndBehaveAsSakura__Tasks__WaitEventTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__WaitEventTaskProps>(o);
  }
};

struct BehaveAsSakura__Tasks__WaitTimerTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__WaitTimerTaskDesc GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskDesc(_bb, new BehaveAsSakura__Tasks__WaitTimerTaskDesc()); }
  public static BehaveAsSakura__Tasks__WaitTimerTaskDesc GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tasks__WaitTimerTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__WaitTimerTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Variables__VariableDesc? Time { get { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Variables__VariableDesc?)(new BehaveAsSakura__Variables__VariableDesc()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<BehaveAsSakura__Tasks__WaitTimerTaskDesc> CreateBehaveAsSakura__Tasks__WaitTimerTaskDesc(FlatBufferBuilder builder,
      Offset<BehaveAsSakura__Variables__VariableDesc> timeOffset = default(Offset<BehaveAsSakura__Variables__VariableDesc>)) {
    builder.StartObject(1);
    BehaveAsSakura__Tasks__WaitTimerTaskDesc.AddTime(builder, timeOffset);
    return BehaveAsSakura__Tasks__WaitTimerTaskDesc.EndBehaveAsSakura__Tasks__WaitTimerTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tasks__WaitTimerTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTime(FlatBufferBuilder builder, Offset<BehaveAsSakura__Variables__VariableDesc> timeOffset) { builder.AddOffset(0, timeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tasks__WaitTimerTaskDesc> EndBehaveAsSakura__Tasks__WaitTimerTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__WaitTimerTaskDesc>(o);
  }
};

struct BehaveAsSakura__Tasks__WaitTimerTaskProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tasks__WaitTimerTaskProps GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskProps(_bb, new BehaveAsSakura__Tasks__WaitTimerTaskProps()); }
  public static BehaveAsSakura__Tasks__WaitTimerTaskProps GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskProps(ByteBuffer _bb, BehaveAsSakura__Tasks__WaitTimerTaskProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tasks__WaitTimerTaskProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TimerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public bool IsTimerTriggered { get { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BehaveAsSakura__Tasks__WaitTimerTaskProps> CreateBehaveAsSakura__Tasks__WaitTimerTaskProps(FlatBufferBuilder builder,
      uint timerId = 0,
      bool isTimerTriggered = false) {
    builder.StartObject(2);
    BehaveAsSakura__Tasks__WaitTimerTaskProps.AddTimerId(builder, timerId);
    BehaveAsSakura__Tasks__WaitTimerTaskProps.AddIsTimerTriggered(builder, isTimerTriggered);
    return BehaveAsSakura__Tasks__WaitTimerTaskProps.EndBehaveAsSakura__Tasks__WaitTimerTaskProps(builder);
  }

  public static void StartBehaveAsSakura__Tasks__WaitTimerTaskProps(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTimerId(FlatBufferBuilder builder, uint timerId) { builder.AddUint(0, timerId, 0); }
  public static void AddIsTimerTriggered(FlatBufferBuilder builder, bool isTimerTriggered) { builder.AddBool(1, isTimerTriggered, false); }
  public static Offset<BehaveAsSakura__Tasks__WaitTimerTaskProps> EndBehaveAsSakura__Tasks__WaitTimerTaskProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tasks__WaitTimerTaskProps>(o);
  }
};

struct BehaveAsSakura__Events__SubscriptionProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Events__SubscriptionProps GetRootAsBehaveAsSakura__Events__SubscriptionProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Events__SubscriptionProps(_bb, new BehaveAsSakura__Events__SubscriptionProps()); }
  public static BehaveAsSakura__Events__SubscriptionProps GetRootAsBehaveAsSakura__Events__SubscriptionProps(ByteBuffer _bb, BehaveAsSakura__Events__SubscriptionProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Events__SubscriptionProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Type { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTypeBytes() { return __p.__vector_as_arraysegment(4); }
  public uint TaskIds(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUint(__p.__vector(o) + j * 4) : (uint)0; }
  public int TaskIdsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ArraySegment<byte>? GetTaskIdsBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<BehaveAsSakura__Events__SubscriptionProps> CreateBehaveAsSakura__Events__SubscriptionProps(FlatBufferBuilder builder,
      StringOffset typeOffset = default(StringOffset),
      VectorOffset taskIdsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    BehaveAsSakura__Events__SubscriptionProps.AddTaskIds(builder, taskIdsOffset);
    BehaveAsSakura__Events__SubscriptionProps.AddType(builder, typeOffset);
    return BehaveAsSakura__Events__SubscriptionProps.EndBehaveAsSakura__Events__SubscriptionProps(builder);
  }

  public static void StartBehaveAsSakura__Events__SubscriptionProps(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, StringOffset typeOffset) { builder.AddOffset(0, typeOffset.Value, 0); }
  public static void AddTaskIds(FlatBufferBuilder builder, VectorOffset taskIdsOffset) { builder.AddOffset(1, taskIdsOffset.Value, 0); }
  public static VectorOffset CreateTaskIdsVector(FlatBufferBuilder builder, uint[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddUint(data[i]); return builder.EndVector(); }
  public static void StartTaskIdsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__Events__SubscriptionProps> EndBehaveAsSakura__Events__SubscriptionProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Events__SubscriptionProps>(o);
  }
};

struct BehaveAsSakura__Events__EventBusProps : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Events__EventBusProps GetRootAsBehaveAsSakura__Events__EventBusProps(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Events__EventBusProps(_bb, new BehaveAsSakura__Events__EventBusProps()); }
  public static BehaveAsSakura__Events__EventBusProps GetRootAsBehaveAsSakura__Events__EventBusProps(ByteBuffer _bb, BehaveAsSakura__Events__EventBusProps obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Events__EventBusProps __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BehaveAsSakura__Events__IEvent__UnionWrapper? Events(int j) { int o = __p.__offset(4); return o != 0 ? (BehaveAsSakura__Events__IEvent__UnionWrapper?)(new BehaveAsSakura__Events__IEvent__UnionWrapper()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EventsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public BehaveAsSakura__Events__SubscriptionProps? Subscriptions(int j) { int o = __p.__offset(6); return o != 0 ? (BehaveAsSakura__Events__SubscriptionProps?)(new BehaveAsSakura__Events__SubscriptionProps()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubscriptionsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<BehaveAsSakura__Events__EventBusProps> CreateBehaveAsSakura__Events__EventBusProps(FlatBufferBuilder builder,
      VectorOffset eventsOffset = default(VectorOffset),
      VectorOffset subscriptionsOffset = default(VectorOffset)) {
    builder.StartObject(2);
    BehaveAsSakura__Events__EventBusProps.AddSubscriptions(builder, subscriptionsOffset);
    BehaveAsSakura__Events__EventBusProps.AddEvents(builder, eventsOffset);
    return BehaveAsSakura__Events__EventBusProps.EndBehaveAsSakura__Events__EventBusProps(builder);
  }

  public static void StartBehaveAsSakura__Events__EventBusProps(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddEvents(FlatBufferBuilder builder, VectorOffset eventsOffset) { builder.AddOffset(0, eventsOffset.Value, 0); }
  public static VectorOffset CreateEventsVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Events__IEvent__UnionWrapper>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartEventsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubscriptions(FlatBufferBuilder builder, VectorOffset subscriptionsOffset) { builder.AddOffset(1, subscriptionsOffset.Value, 0); }
  public static VectorOffset CreateSubscriptionsVector(FlatBufferBuilder builder, Offset<BehaveAsSakura__Events__SubscriptionProps>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartSubscriptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<BehaveAsSakura__Events__EventBusProps> EndBehaveAsSakura__Events__EventBusProps(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Events__EventBusProps>(o);
  }
};

struct BehaveAsSakura__Events__SimpleEventTriggeredEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Events__SimpleEventTriggeredEvent GetRootAsBehaveAsSakura__Events__SimpleEventTriggeredEvent(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Events__SimpleEventTriggeredEvent(_bb, new BehaveAsSakura__Events__SimpleEventTriggeredEvent()); }
  public static BehaveAsSakura__Events__SimpleEventTriggeredEvent GetRootAsBehaveAsSakura__Events__SimpleEventTriggeredEvent(ByteBuffer _bb, BehaveAsSakura__Events__SimpleEventTriggeredEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Events__SimpleEventTriggeredEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string EventType { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetEventTypeBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<BehaveAsSakura__Events__SimpleEventTriggeredEvent> CreateBehaveAsSakura__Events__SimpleEventTriggeredEvent(FlatBufferBuilder builder,
      StringOffset eventTypeOffset = default(StringOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Events__SimpleEventTriggeredEvent.AddEventType(builder, eventTypeOffset);
    return BehaveAsSakura__Events__SimpleEventTriggeredEvent.EndBehaveAsSakura__Events__SimpleEventTriggeredEvent(builder);
  }

  public static void StartBehaveAsSakura__Events__SimpleEventTriggeredEvent(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddEventType(FlatBufferBuilder builder, StringOffset eventTypeOffset) { builder.AddOffset(0, eventTypeOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Events__SimpleEventTriggeredEvent> EndBehaveAsSakura__Events__SimpleEventTriggeredEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Events__SimpleEventTriggeredEvent>(o);
  }
};

struct BehaveAsSakura__Events__TimerTriggeredEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Events__TimerTriggeredEvent GetRootAsBehaveAsSakura__Events__TimerTriggeredEvent(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Events__TimerTriggeredEvent(_bb, new BehaveAsSakura__Events__TimerTriggeredEvent()); }
  public static BehaveAsSakura__Events__TimerTriggeredEvent GetRootAsBehaveAsSakura__Events__TimerTriggeredEvent(ByteBuffer _bb, BehaveAsSakura__Events__TimerTriggeredEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Events__TimerTriggeredEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint TimerId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<BehaveAsSakura__Events__TimerTriggeredEvent> CreateBehaveAsSakura__Events__TimerTriggeredEvent(FlatBufferBuilder builder,
      uint timerId = 0) {
    builder.StartObject(1);
    BehaveAsSakura__Events__TimerTriggeredEvent.AddTimerId(builder, timerId);
    return BehaveAsSakura__Events__TimerTriggeredEvent.EndBehaveAsSakura__Events__TimerTriggeredEvent(builder);
  }

  public static void StartBehaveAsSakura__Events__TimerTriggeredEvent(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddTimerId(FlatBufferBuilder builder, uint timerId) { builder.AddUint(0, timerId, 0); }
  public static Offset<BehaveAsSakura__Events__TimerTriggeredEvent> EndBehaveAsSakura__Events__TimerTriggeredEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Events__TimerTriggeredEvent>(o);
  }
};

struct BehaveAsSakura__Tests__DumpLogTaskDesc : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BehaveAsSakura__Tests__DumpLogTaskDesc GetRootAsBehaveAsSakura__Tests__DumpLogTaskDesc(ByteBuffer _bb) { return GetRootAsBehaveAsSakura__Tests__DumpLogTaskDesc(_bb, new BehaveAsSakura__Tests__DumpLogTaskDesc()); }
  public static BehaveAsSakura__Tests__DumpLogTaskDesc GetRootAsBehaveAsSakura__Tests__DumpLogTaskDesc(ByteBuffer _bb, BehaveAsSakura__Tests__DumpLogTaskDesc obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BehaveAsSakura__Tests__DumpLogTaskDesc __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Text { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTextBytes() { return __p.__vector_as_arraysegment(4); }

  public static Offset<BehaveAsSakura__Tests__DumpLogTaskDesc> CreateBehaveAsSakura__Tests__DumpLogTaskDesc(FlatBufferBuilder builder,
      StringOffset textOffset = default(StringOffset)) {
    builder.StartObject(1);
    BehaveAsSakura__Tests__DumpLogTaskDesc.AddText(builder, textOffset);
    return BehaveAsSakura__Tests__DumpLogTaskDesc.EndBehaveAsSakura__Tests__DumpLogTaskDesc(builder);
  }

  public static void StartBehaveAsSakura__Tests__DumpLogTaskDesc(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddText(FlatBufferBuilder builder, StringOffset textOffset) { builder.AddOffset(0, textOffset.Value, 0); }
  public static Offset<BehaveAsSakura__Tests__DumpLogTaskDesc> EndBehaveAsSakura__Tests__DumpLogTaskDesc(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BehaveAsSakura__Tests__DumpLogTaskDesc>(o);
  }
};


}



namespace BehaveAsSakura.Serialization
{
    using FlatBuffers;
    using System;
    using System.Collections.Generic;

    static class BehaveAsSakura__Events__IEvent__UnionSerializer
    {
        public static bool Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Events.IEvent obj, out int offset, out BehaveAsSakura__Events__IEvent type)
        {
            if (obj == null)
            {
                offset = 0;
                type = BehaveAsSakura__Events__IEvent.NONE;
                return false;
            }

            if (obj is BehaveAsSakura.Events.SimpleEventTriggeredEvent)
            {
                var o = BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Events.SimpleEventTriggeredEvent)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__SimpleEventTriggeredEvent;
                return true;
            }

            if (obj is BehaveAsSakura.Events.TimerTriggeredEvent)
            {
                var o = BehaveAsSakura__Events__TimerTriggeredEvent__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Events.TimerTriggeredEvent)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__TimerTriggeredEvent;
                return true;
            }

            throw new NotSupportedException(obj.GetType().FullName);
        }

        public static Offset<BehaveAsSakura__Events__IEvent__UnionWrapper>[] Serialize(FlatBufferBuilder fbb, IList<BehaveAsSakura.Events.IEvent> objects)
        {
            if (objects == null)
                return null;
            
            var offsets = new Offset<BehaveAsSakura__Events__IEvent__UnionWrapper>[objects.Count];
            for (int i = 0; i < objects.Count; i++)
            {
                var obj = objects[i];
                if (obj == null)
                {
                    offsets[i] = BehaveAsSakura__Events__IEvent__UnionWrapper.CreateBehaveAsSakura__Events__IEvent__UnionWrapper(fbb);
                    continue;
                }

                if (obj is BehaveAsSakura.Events.SimpleEventTriggeredEvent)
                {
                    var o = BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Events.SimpleEventTriggeredEvent)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Events__IEvent__UnionWrapper.CreateBehaveAsSakura__Events__IEvent__UnionWrapper(fbb, 
                                BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__SimpleEventTriggeredEvent, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Events.TimerTriggeredEvent)
                {
                    var o = BehaveAsSakura__Events__TimerTriggeredEvent__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Events.TimerTriggeredEvent)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Events__IEvent__UnionWrapper.CreateBehaveAsSakura__Events__IEvent__UnionWrapper(fbb, 
                                BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__TimerTriggeredEvent, 
                                offset);
                    continue;
                }

                throw new NotSupportedException(obj.GetType().FullName);
            }

            return offsets;
        }

        public static BehaveAsSakura.Events.IEvent[] Deserialize(int objectsLength, Func<int, BehaveAsSakura__Events__IEvent__UnionWrapper?> getObject)
        {
            if (objectsLength == 0)
                return null;
            
            var objects = new BehaveAsSakura.Events.IEvent[objectsLength];
            for (int i = 0; i < objectsLength; i++)
            {
                var wrapper = getObject(i);
                if (!wrapper.HasValue)
                    continue;

                switch (wrapper.Value.BodyType)
                {
                    case BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__SimpleEventTriggeredEvent:
                        objects[i] = BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Events__SimpleEventTriggeredEvent>());
                        break;

                    case BehaveAsSakura__Events__IEvent.BehaveAsSakura__Events__TimerTriggeredEvent:
                        objects[i] = BehaveAsSakura__Events__TimerTriggeredEvent__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Events__TimerTriggeredEvent>());
                        break;

                    case BehaveAsSakura__Events__IEvent.NONE:
                        break;

                    default:
                        throw new NotSupportedException(wrapper.Value.BodyType.ToString());
                }
            }

            return objects;
        }
    }

    static class BehaveAsSakura__Tasks__ITaskDesc__UnionSerializer
    {
        public static bool Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ITaskDesc obj, out int offset, out BehaveAsSakura__Tasks__ITaskDesc type)
        {
            if (obj == null)
            {
                offset = 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.NONE;
                return false;
            }

            if (obj is BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.InverterTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.InverterTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.ListenEventTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ListenEventTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.LogTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.LogTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.ParallelSelectorTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ParallelSelectorTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.ParallelTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ParallelTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.RepeaterTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.RepeaterTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.ReturnFailureTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ReturnFailureTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.ReturnSuccessTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ReturnSuccessTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SelectorTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SelectorTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SendEventTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SendEventTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SequenceTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SequenceTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SubTreeTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SubTreeTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.UntilFailureDesc)
            {
                var o = BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.UntilFailureDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.UntilSuccessDesc)
            {
                var o = BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.UntilSuccessDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.WaitEventTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitEventTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.WaitTimerTaskDesc)
            {
                var o = BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitTimerTaskDesc)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc;
                return true;
            }

            throw new NotSupportedException(obj.GetType().FullName);
        }

        public static Offset<BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper>[] Serialize(FlatBufferBuilder fbb, IList<BehaveAsSakura.Tasks.ITaskDesc> objects)
        {
            if (objects == null)
                return null;
            
            var offsets = new Offset<BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper>[objects.Count];
            for (int i = 0; i < objects.Count; i++)
            {
                var obj = objects[i];
                if (obj == null)
                {
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.InverterTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.InverterTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ListenEventTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ListenEventTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.LogTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.LogTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ParallelSelectorTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ParallelSelectorTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ParallelTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ParallelTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.RepeaterTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.RepeaterTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ReturnFailureTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ReturnFailureTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ReturnSuccessTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ReturnSuccessTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SelectorTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SelectorTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SendEventTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SendEventTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SequenceTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SequenceTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SubTreeTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SubTreeTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.UntilFailureDesc)
                {
                    var o = BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.UntilFailureDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.UntilSuccessDesc)
                {
                    var o = BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.UntilSuccessDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.WaitEventTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitEventTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.WaitTimerTaskDesc)
                {
                    var o = BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitTimerTaskDesc)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskDesc__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc, 
                                offset);
                    continue;
                }

                throw new NotSupportedException(obj.GetType().FullName);
            }

            return offsets;
        }

        public static BehaveAsSakura.Tasks.ITaskDesc[] Deserialize(int objectsLength, Func<int, BehaveAsSakura__Tasks__ITaskDesc__UnionWrapper?> getObject)
        {
            if (objectsLength == 0)
                return null;
            
            var objects = new BehaveAsSakura.Tasks.ITaskDesc[objectsLength];
            for (int i = 0; i < objectsLength; i++)
            {
                var wrapper = getObject(i);
                if (!wrapper.HasValue)
                    continue;

                switch (wrapper.Value.BodyType)
                {
                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__InverterTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ListenEventTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__LogTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ParallelTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__RepeaterTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SelectorTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SendEventTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SequenceTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SubTreeTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc:
                        objects[i] = BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__UntilFailureDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc:
                        objects[i] = BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__UntilSuccessDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__WaitEventTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc:
                        objects[i] = BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__WaitTimerTaskDesc>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskDesc.NONE:
                        break;

                    default:
                        throw new NotSupportedException(wrapper.Value.BodyType.ToString());
                }
            }

            return objects;
        }
    }

    static class BehaveAsSakura__Tasks__ITaskProps__UnionSerializer
    {
        public static bool Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ITaskProps obj, out int offset, out BehaveAsSakura__Tasks__ITaskProps type)
        {
            if (obj == null)
            {
                offset = 0;
                type = BehaveAsSakura__Tasks__ITaskProps.NONE;
                return false;
            }

            if (obj is BehaveAsSakura.Tasks.ListenEventTaskProps)
            {
                var o = BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ListenEventTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__ListenEventTaskProps;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.RepeaterTaskProps)
            {
                var o = BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.RepeaterTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__RepeaterTaskProps;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SequenceTaskProps)
            {
                var o = BehaveAsSakura__Tasks__SequenceTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SequenceTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SequenceTaskProps;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.SubTreeTaskProps)
            {
                var o = BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SubTreeTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SubTreeTaskProps;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.WaitEventTaskProps)
            {
                var o = BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitEventTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitEventTaskProps;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.WaitTimerTaskProps)
            {
                var o = BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitTimerTaskProps)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitTimerTaskProps;
                return true;
            }

            throw new NotSupportedException(obj.GetType().FullName);
        }

        public static Offset<BehaveAsSakura__Tasks__ITaskProps__UnionWrapper>[] Serialize(FlatBufferBuilder fbb, IList<BehaveAsSakura.Tasks.ITaskProps> objects)
        {
            if (objects == null)
                return null;
            
            var offsets = new Offset<BehaveAsSakura__Tasks__ITaskProps__UnionWrapper>[objects.Count];
            for (int i = 0; i < objects.Count; i++)
            {
                var obj = objects[i];
                if (obj == null)
                {
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.ListenEventTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.ListenEventTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__ListenEventTaskProps, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.RepeaterTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.RepeaterTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__RepeaterTaskProps, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SequenceTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__SequenceTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SequenceTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SequenceTaskProps, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.SubTreeTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.SubTreeTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SubTreeTaskProps, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.WaitEventTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitEventTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitEventTaskProps, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.WaitTimerTaskProps)
                {
                    var o = BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.WaitTimerTaskProps)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__ITaskProps__UnionWrapper.CreateBehaveAsSakura__Tasks__ITaskProps__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitTimerTaskProps, 
                                offset);
                    continue;
                }

                throw new NotSupportedException(obj.GetType().FullName);
            }

            return offsets;
        }

        public static BehaveAsSakura.Tasks.ITaskProps[] Deserialize(int objectsLength, Func<int, BehaveAsSakura__Tasks__ITaskProps__UnionWrapper?> getObject)
        {
            if (objectsLength == 0)
                return null;
            
            var objects = new BehaveAsSakura.Tasks.ITaskProps[objectsLength];
            for (int i = 0; i < objectsLength; i++)
            {
                var wrapper = getObject(i);
                if (!wrapper.HasValue)
                    continue;

                switch (wrapper.Value.BodyType)
                {
                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__ListenEventTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__ListenEventTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__RepeaterTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__RepeaterTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SequenceTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__SequenceTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SequenceTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SubTreeTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__SubTreeTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitEventTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__WaitEventTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitTimerTaskProps:
                        objects[i] = BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__WaitTimerTaskProps>());
                        break;

                    case BehaveAsSakura__Tasks__ITaskProps.NONE:
                        break;

                    default:
                        throw new NotSupportedException(wrapper.Value.BodyType.ToString());
                }
            }

            return objects;
        }
    }

    static class BehaveAsSakura__Tasks__TaskDescWrapper__UnionSerializer
    {
        public static bool Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.TaskDescWrapper obj, out int offset, out BehaveAsSakura__Tasks__TaskDescWrapper type)
        {
            if (obj == null)
            {
                offset = 0;
                type = BehaveAsSakura__Tasks__TaskDescWrapper.NONE;
                return false;
            }

            if (obj is BehaveAsSakura.Tasks.LeafTaskDescWrapper)
            {
                var o = BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.LeafTaskDescWrapper)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__LeafTaskDescWrapper;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.DecoratorTaskDescWrapper)
            {
                var o = BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.DecoratorTaskDescWrapper)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__DecoratorTaskDescWrapper;
                return true;
            }

            if (obj is BehaveAsSakura.Tasks.CompositeTaskDescWrapper)
            {
                var o = BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.CompositeTaskDescWrapper)obj);
                offset = o.HasValue ? o.Value.Value : 0;
                type = BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__CompositeTaskDescWrapper;
                return true;
            }

            throw new NotSupportedException(obj.GetType().FullName);
        }

        public static Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper>[] Serialize(FlatBufferBuilder fbb, IList<BehaveAsSakura.Tasks.TaskDescWrapper> objects)
        {
            if (objects == null)
                return null;
            
            var offsets = new Offset<BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper>[objects.Count];
            for (int i = 0; i < objects.Count; i++)
            {
                var obj = objects[i];
                if (obj == null)
                {
                    offsets[i] = BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.CreateBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(fbb);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.LeafTaskDescWrapper)
                {
                    var o = BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.LeafTaskDescWrapper)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.CreateBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__LeafTaskDescWrapper, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.DecoratorTaskDescWrapper)
                {
                    var o = BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.DecoratorTaskDescWrapper)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.CreateBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__DecoratorTaskDescWrapper, 
                                offset);
                    continue;
                }

                if (obj is BehaveAsSakura.Tasks.CompositeTaskDescWrapper)
                {
                    var o = BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer.Instance.Serialize(fbb, (BehaveAsSakura.Tasks.CompositeTaskDescWrapper)obj);
                    var offset = o.HasValue ? o.Value.Value : 0;
                    offsets[i] = BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper.CreateBehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper(fbb, 
                                BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__CompositeTaskDescWrapper, 
                                offset);
                    continue;
                }

                throw new NotSupportedException(obj.GetType().FullName);
            }

            return offsets;
        }

        public static BehaveAsSakura.Tasks.TaskDescWrapper[] Deserialize(int objectsLength, Func<int, BehaveAsSakura__Tasks__TaskDescWrapper__UnionWrapper?> getObject)
        {
            if (objectsLength == 0)
                return null;
            
            var objects = new BehaveAsSakura.Tasks.TaskDescWrapper[objectsLength];
            for (int i = 0; i < objectsLength; i++)
            {
                var wrapper = getObject(i);
                if (!wrapper.HasValue)
                    continue;

                switch (wrapper.Value.BodyType)
                {
                    case BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__LeafTaskDescWrapper:
                        objects[i] = BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__LeafTaskDescWrapper>());
                        break;

                    case BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__DecoratorTaskDescWrapper:
                        objects[i] = BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__DecoratorTaskDescWrapper>());
                        break;

                    case BehaveAsSakura__Tasks__TaskDescWrapper.BehaveAsSakura__Tasks__CompositeTaskDescWrapper:
                        objects[i] = BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer.Instance.Deserialize(wrapper.Value.Body<BehaveAsSakura__Tasks__CompositeTaskDescWrapper>());
                        break;

                    case BehaveAsSakura__Tasks__TaskDescWrapper.NONE:
                        break;

                    default:
                        throw new NotSupportedException(wrapper.Value.BodyType.ToString());
                }
            }

            return objects;
        }
    }

}

namespace BehaveAsSakura.Serialization
{
    using FlatBuffers;
    using System;
    using System.Collections.Generic;

    interface ISerializer
    {
        byte[] Serialize(object obj);

        object Deserialize(byte[] data);
    }

    interface ISerializer<TObject, TFlatBufferObject>
        where TFlatBufferObject : struct, IFlatbufferObject
    {
        Offset<TFlatBufferObject>? Serialize(FlatBufferBuilder fbb, TObject obj);

        Offset<TFlatBufferObject>[] Serialize(FlatBufferBuilder fbb, IList<TObject> objects);

        TObject Deserialize(TFlatBufferObject? obj);

        TObject Deserialize(TFlatBufferObject obj);

        TObject[] Deserialize(int objectsLength, Func<int, TFlatBufferObject?> getObjects);
    }

    abstract class Serializer<TObject, TFlatBufferObject> : ISerializer<TObject, TFlatBufferObject>, ISerializer
        where TFlatBufferObject : struct, IFlatbufferObject
    {
        public byte[] Serialize(object obj)
        {
            var fbb = new FlatBufferBuilder(1024);
            var offset = Serialize(fbb, (TObject)obj);
            if (offset.HasValue)
            {
                fbb.Finish(offset.Value.Value);

                return fbb.SizedByteArray();
            }
            else
                return null;
        }

        public abstract Offset<TFlatBufferObject>? Serialize(FlatBufferBuilder fbb, TObject obj);

        public Offset<TFlatBufferObject>[] Serialize(FlatBufferBuilder fbb, IList<TObject> objects)
        {
            if (objects == null)
                return null;

            var offsets = new Offset<TFlatBufferObject>[objects.Count];
            for (int i = 0; i < objects.Count; i++)
            {
                var offset = Serialize(fbb, objects[i]);
                if (offset.HasValue)
                    offsets[i] = offset.Value;
            }

            return offsets;
        }

        public static StringOffset[] SerializeString(FlatBufferBuilder fbb, string[] objects)
        {
            if (objects == null)
                return null;

            var offsets = new StringOffset[objects.Length];
            for (int i = 0; i < objects.Length; i++)
                offsets[i] = fbb.CreateString(objects[i]);

            return offsets;
        }

        public object Deserialize(byte[] data)
        {
            if (data == null)
                return default(TObject);

            return Deserialize(GetRootAs(new ByteBuffer(data)));
        }

        protected abstract TFlatBufferObject GetRootAs(ByteBuffer buffer);

        public TObject Deserialize(TFlatBufferObject? obj)
        {
            if (!obj.HasValue)
                return default(TObject);

            return Deserialize(obj.Value);
        }

        public abstract TObject Deserialize(TFlatBufferObject obj);

        public TObject[] Deserialize(int objectsLength, Func<int, TFlatBufferObject?> getObjects)
        {
            if (objectsLength == 0)
                return null;

            var objects = new TObject[objectsLength];
            for (int i = 0; i < objectsLength; i++)
                objects[i] = Deserialize(getObjects(i));

            return objects;
        }

        public static T[] DeserializeScalar<T>(int objectsLength, Func<int, T> getObjects)
        {
            if (objectsLength == 0)
                return null;

            var objects = new T[objectsLength];
            for (int i = 0; i < objectsLength; i++)
                objects[i] = getObjects(i);

            return objects;
        }
    }
}

namespace BehaveAsSakura.Serialization
{
    using FlatBuffers;
    using System;
    using System.Collections.Generic;
    using System.Linq;


    class BehaveAsSakura__BehaviorTreeDesc__Serializer : Serializer<BehaveAsSakura.BehaviorTreeDesc, BehaveAsSakura__BehaviorTreeDesc>
    {
        public static readonly BehaveAsSakura__BehaviorTreeDesc__Serializer Instance = new BehaveAsSakura__BehaviorTreeDesc__Serializer();

        public override Offset<BehaveAsSakura__BehaviorTreeDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.BehaviorTreeDesc obj)
        {
            if (obj == null)
                return null;
            var vectorTasks = default(VectorOffset?);
            if (obj.Tasks != null)
            {
                var offsetsTasks = BehaveAsSakura__Tasks__TaskDescWrapper__UnionSerializer.Serialize(fbb, obj.Tasks);
                vectorTasks = BehaveAsSakura__BehaviorTreeDesc.CreateTasksVector(fbb, offsetsTasks);
            }
            BehaveAsSakura__BehaviorTreeDesc.StartBehaveAsSakura__BehaviorTreeDesc(fbb);
            if (vectorTasks.HasValue)
                BehaveAsSakura__BehaviorTreeDesc.AddTasks(fbb, vectorTasks.Value);
            BehaveAsSakura__BehaviorTreeDesc.AddRootTaskId(fbb, obj.RootTaskId);
            return BehaveAsSakura__BehaviorTreeDesc.EndBehaveAsSakura__BehaviorTreeDesc(fbb);
        }
        protected override BehaveAsSakura__BehaviorTreeDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__BehaviorTreeDesc.GetRootAsBehaveAsSakura__BehaviorTreeDesc(buffer);
        }
        public override BehaveAsSakura.BehaviorTreeDesc Deserialize(BehaveAsSakura__BehaviorTreeDesc obj)
        {
            return new BehaveAsSakura.BehaviorTreeDesc()
            {
                Tasks = BehaveAsSakura__Tasks__TaskDescWrapper__UnionSerializer.Deserialize(obj.TasksLength, obj.Tasks),
                RootTaskId = obj.RootTaskId,
            };
        }
    }

    class BehaveAsSakura__BehaviorTreeProps__Serializer : Serializer<BehaveAsSakura.BehaviorTreeProps, BehaveAsSakura__BehaviorTreeProps>
    {
        public static readonly BehaveAsSakura__BehaviorTreeProps__Serializer Instance = new BehaveAsSakura__BehaviorTreeProps__Serializer();

        public override Offset<BehaveAsSakura__BehaviorTreeProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.BehaviorTreeProps obj)
        {
            if (obj == null)
                return null;
            var offsetEventBus = BehaveAsSakura__Events__EventBusProps__Serializer.Instance.Serialize(fbb, obj.EventBus);
            var offsetTimerManager = BehaveAsSakura__Timers__TimerManagerProps__Serializer.Instance.Serialize(fbb, obj.TimerManager);
            var vectorTasks = default(VectorOffset?);
            if (obj.Tasks != null)
            {
                var offsetsTasks = BehaveAsSakura__Tasks__TaskPropsWrapper__Serializer.Instance.Serialize(fbb, obj.Tasks);
                vectorTasks = BehaveAsSakura__BehaviorTreeProps.CreateTasksVector(fbb, offsetsTasks);
            }
            BehaveAsSakura__BehaviorTreeProps.StartBehaveAsSakura__BehaviorTreeProps(fbb);
            if (offsetEventBus.HasValue)
                BehaveAsSakura__BehaviorTreeProps.AddEventBus(fbb, offsetEventBus.Value);
            if (offsetTimerManager.HasValue)
                BehaveAsSakura__BehaviorTreeProps.AddTimerManager(fbb, offsetTimerManager.Value);
            if (vectorTasks.HasValue)
                BehaveAsSakura__BehaviorTreeProps.AddTasks(fbb, vectorTasks.Value);
            return BehaveAsSakura__BehaviorTreeProps.EndBehaveAsSakura__BehaviorTreeProps(fbb);
        }
        protected override BehaveAsSakura__BehaviorTreeProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__BehaviorTreeProps.GetRootAsBehaveAsSakura__BehaviorTreeProps(buffer);
        }
        public override BehaveAsSakura.BehaviorTreeProps Deserialize(BehaveAsSakura__BehaviorTreeProps obj)
        {
            return new BehaveAsSakura.BehaviorTreeProps()
            {
                EventBus = BehaveAsSakura__Events__EventBusProps__Serializer.Instance.Deserialize(obj.EventBus),
                TimerManager = BehaveAsSakura__Timers__TimerManagerProps__Serializer.Instance.Deserialize(obj.TimerManager),
                Tasks = BehaveAsSakura__Tasks__TaskPropsWrapper__Serializer.Instance.Deserialize(obj.TasksLength, obj.Tasks),
            };
        }
    }

    class BehaveAsSakura__Variables__VariableDesc__Serializer : Serializer<BehaveAsSakura.Variables.VariableDesc, BehaveAsSakura__Variables__VariableDesc>
    {
        public static readonly BehaveAsSakura__Variables__VariableDesc__Serializer Instance = new BehaveAsSakura__Variables__VariableDesc__Serializer();

        public override Offset<BehaveAsSakura__Variables__VariableDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Variables.VariableDesc obj)
        {
            if (obj == null)
                return null;
            var offsetValue = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Value))
                offsetValue =  fbb.CreateString(obj.Value);
            BehaveAsSakura__Variables__VariableDesc.StartBehaveAsSakura__Variables__VariableDesc(fbb);
            BehaveAsSakura__Variables__VariableDesc.AddType(fbb, (BehaveAsSakura__Variables__VariableType)(System.Byte)obj.Type);
            BehaveAsSakura__Variables__VariableDesc.AddSource(fbb, (BehaveAsSakura__Variables__VariableSource)(System.Byte)obj.Source);
            if (offsetValue.HasValue)
                BehaveAsSakura__Variables__VariableDesc.AddValue(fbb, offsetValue.Value);
            return BehaveAsSakura__Variables__VariableDesc.EndBehaveAsSakura__Variables__VariableDesc(fbb);
        }
        protected override BehaveAsSakura__Variables__VariableDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Variables__VariableDesc.GetRootAsBehaveAsSakura__Variables__VariableDesc(buffer);
        }
        public override BehaveAsSakura.Variables.VariableDesc Deserialize(BehaveAsSakura__Variables__VariableDesc obj)
        {
            return new BehaveAsSakura.Variables.VariableDesc()
            {
                Type = (BehaveAsSakura.Variables.VariableType)(System.Byte)obj.Type,
                Source = (BehaveAsSakura.Variables.VariableSource)(System.Byte)obj.Source,
                Value = obj.Value,
            };
        }
    }

    class BehaveAsSakura__Variables__VariableSetProps__Serializer : Serializer<BehaveAsSakura.Variables.VariableSetProps, BehaveAsSakura__Variables__VariableSetProps>
    {
        public static readonly BehaveAsSakura__Variables__VariableSetProps__Serializer Instance = new BehaveAsSakura__Variables__VariableSetProps__Serializer();

        public override Offset<BehaveAsSakura__Variables__VariableSetProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Variables.VariableSetProps obj)
        {
            if (obj == null)
                return null;
            var vectorVariables = default(VectorOffset?);
            if (obj.Variables != null)
            {
                var offsetsVariables = BehaveAsSakura__Variables__NamedVariableDesc__Serializer.Instance.Serialize(fbb, obj.Variables);
                vectorVariables = BehaveAsSakura__Variables__VariableSetProps.CreateVariablesVector(fbb, offsetsVariables);
            }
            BehaveAsSakura__Variables__VariableSetProps.StartBehaveAsSakura__Variables__VariableSetProps(fbb);
            if (vectorVariables.HasValue)
                BehaveAsSakura__Variables__VariableSetProps.AddVariables(fbb, vectorVariables.Value);
            return BehaveAsSakura__Variables__VariableSetProps.EndBehaveAsSakura__Variables__VariableSetProps(fbb);
        }
        protected override BehaveAsSakura__Variables__VariableSetProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Variables__VariableSetProps.GetRootAsBehaveAsSakura__Variables__VariableSetProps(buffer);
        }
        public override BehaveAsSakura.Variables.VariableSetProps Deserialize(BehaveAsSakura__Variables__VariableSetProps obj)
        {
            return new BehaveAsSakura.Variables.VariableSetProps()
            {
                Variables = BehaveAsSakura__Variables__NamedVariableDesc__Serializer.Instance.Deserialize(obj.VariablesLength, obj.Variables),
            };
        }
    }

    class BehaveAsSakura__Variables__NamedVariableDesc__Serializer : Serializer<BehaveAsSakura.Variables.NamedVariableDesc, BehaveAsSakura__Variables__NamedVariableDesc>
    {
        public static readonly BehaveAsSakura__Variables__NamedVariableDesc__Serializer Instance = new BehaveAsSakura__Variables__NamedVariableDesc__Serializer();

        public override Offset<BehaveAsSakura__Variables__NamedVariableDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Variables.NamedVariableDesc obj)
        {
            if (obj == null)
                return null;
            var offsetName = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Name))
                offsetName =  fbb.CreateString(obj.Name);
            var offsetDesc = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.Desc);
            BehaveAsSakura__Variables__NamedVariableDesc.StartBehaveAsSakura__Variables__NamedVariableDesc(fbb);
            if (offsetName.HasValue)
                BehaveAsSakura__Variables__NamedVariableDesc.AddName(fbb, offsetName.Value);
            if (offsetDesc.HasValue)
                BehaveAsSakura__Variables__NamedVariableDesc.AddDesc(fbb, offsetDesc.Value);
            return BehaveAsSakura__Variables__NamedVariableDesc.EndBehaveAsSakura__Variables__NamedVariableDesc(fbb);
        }
        protected override BehaveAsSakura__Variables__NamedVariableDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Variables__NamedVariableDesc.GetRootAsBehaveAsSakura__Variables__NamedVariableDesc(buffer);
        }
        public override BehaveAsSakura.Variables.NamedVariableDesc Deserialize(BehaveAsSakura__Variables__NamedVariableDesc obj)
        {
            return new BehaveAsSakura.Variables.NamedVariableDesc()
            {
                Name = obj.Name,
                Desc = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.Desc),
            };
        }
    }

    class BehaveAsSakura__Timers__TimerProps__Serializer : Serializer<BehaveAsSakura.Timers.TimerProps, BehaveAsSakura__Timers__TimerProps>
    {
        public static readonly BehaveAsSakura__Timers__TimerProps__Serializer Instance = new BehaveAsSakura__Timers__TimerProps__Serializer();

        public override Offset<BehaveAsSakura__Timers__TimerProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Timers.TimerProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Timers__TimerProps.StartBehaveAsSakura__Timers__TimerProps(fbb);
            BehaveAsSakura__Timers__TimerProps.AddId(fbb, obj.Id);
            BehaveAsSakura__Timers__TimerProps.AddTotalTime(fbb, obj.TotalTime);
            BehaveAsSakura__Timers__TimerProps.AddEndTime(fbb, obj.EndTime);
            return BehaveAsSakura__Timers__TimerProps.EndBehaveAsSakura__Timers__TimerProps(fbb);
        }
        protected override BehaveAsSakura__Timers__TimerProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Timers__TimerProps.GetRootAsBehaveAsSakura__Timers__TimerProps(buffer);
        }
        public override BehaveAsSakura.Timers.TimerProps Deserialize(BehaveAsSakura__Timers__TimerProps obj)
        {
            return new BehaveAsSakura.Timers.TimerProps()
            {
                Id = obj.Id,
                TotalTime = obj.TotalTime,
                EndTime = obj.EndTime,
            };
        }
    }

    class BehaveAsSakura__Timers__TimerManagerProps__Serializer : Serializer<BehaveAsSakura.Timers.TimerManagerProps, BehaveAsSakura__Timers__TimerManagerProps>
    {
        public static readonly BehaveAsSakura__Timers__TimerManagerProps__Serializer Instance = new BehaveAsSakura__Timers__TimerManagerProps__Serializer();

        public override Offset<BehaveAsSakura__Timers__TimerManagerProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Timers.TimerManagerProps obj)
        {
            if (obj == null)
                return null;
            var vectorTimers = default(VectorOffset?);
            if (obj.Timers != null)
            {
                var offsetsTimers = BehaveAsSakura__Timers__TimerProps__Serializer.Instance.Serialize(fbb, obj.Timers);
                vectorTimers = BehaveAsSakura__Timers__TimerManagerProps.CreateTimersVector(fbb, offsetsTimers);
            }
            BehaveAsSakura__Timers__TimerManagerProps.StartBehaveAsSakura__Timers__TimerManagerProps(fbb);
            BehaveAsSakura__Timers__TimerManagerProps.AddMaxTimerId(fbb, obj.MaxTimerId);
            if (vectorTimers.HasValue)
                BehaveAsSakura__Timers__TimerManagerProps.AddTimers(fbb, vectorTimers.Value);
            return BehaveAsSakura__Timers__TimerManagerProps.EndBehaveAsSakura__Timers__TimerManagerProps(fbb);
        }
        protected override BehaveAsSakura__Timers__TimerManagerProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Timers__TimerManagerProps.GetRootAsBehaveAsSakura__Timers__TimerManagerProps(buffer);
        }
        public override BehaveAsSakura.Timers.TimerManagerProps Deserialize(BehaveAsSakura__Timers__TimerManagerProps obj)
        {
            return new BehaveAsSakura.Timers.TimerManagerProps()
            {
                MaxTimerId = obj.MaxTimerId,
                Timers = BehaveAsSakura__Timers__TimerProps__Serializer.Instance.Deserialize(obj.TimersLength, obj.Timers),
            };
        }
    }

    class BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc, BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetLeft = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.Left);
            var offsetRight = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.Right);
            BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.StartBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(fbb);
            if (offsetLeft.HasValue)
                BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddLeft(fbb, offsetLeft.Value);
            BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddOp(fbb, (BehaveAsSakura__Utils__ComparisonOperator)(System.Byte)obj.Op);
            if (offsetRight.HasValue)
                BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.AddRight(fbb, offsetRight.Value);
            return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.EndBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc.GetRootAsBehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc Deserialize(BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ConditionalEvaluatorTaskDesc()
            {
                Left = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.Left),
                Op = (BehaveAsSakura.Utils.ComparisonOperator)(System.Byte)obj.Op,
                Right = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.Right),
            };
        }
    }

    class BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer : Serializer<BehaveAsSakura.Tasks.DecoratorTaskDescWrapper, BehaveAsSakura__Tasks__DecoratorTaskDescWrapper>
    {
        public static readonly BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer Instance = new BehaveAsSakura__Tasks__DecoratorTaskDescWrapper__Serializer();

        public override Offset<BehaveAsSakura__Tasks__DecoratorTaskDescWrapper>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.DecoratorTaskDescWrapper obj)
        {
            if (obj == null)
                return null;
            var offsetName = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Name))
                offsetName =  fbb.CreateString(obj.Name);
            var offsetComment = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Comment))
                offsetComment =  fbb.CreateString(obj.Comment);
            int offsetCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc typeCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc__UnionSerializer.Serialize(fbb, obj.CustomDesc, out offsetCustomDesc, out typeCustomDesc);
            BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.StartBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(fbb);
            BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddChildTaskId(fbb, obj.ChildTaskId);
            BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddId(fbb, obj.Id);
            if (offsetName.HasValue)
                BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddName(fbb, offsetName.Value);
            if (offsetComment.HasValue)
                BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddComment(fbb, offsetComment.Value);
            if (typeCustomDesc != BehaveAsSakura__Tasks__ITaskDesc.NONE)
            {
                BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddCustomDesc(fbb, offsetCustomDesc);
                BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.AddCustomDescType(fbb, typeCustomDesc);
            }
            return BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.EndBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(fbb);
        }
        protected override BehaveAsSakura__Tasks__DecoratorTaskDescWrapper GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__DecoratorTaskDescWrapper.GetRootAsBehaveAsSakura__Tasks__DecoratorTaskDescWrapper(buffer);
        }
        public override BehaveAsSakura.Tasks.DecoratorTaskDescWrapper Deserialize(BehaveAsSakura__Tasks__DecoratorTaskDescWrapper obj)
        {
            return new BehaveAsSakura.Tasks.DecoratorTaskDescWrapper()
            {
                ChildTaskId = obj.ChildTaskId,
                Id = obj.Id,
                Name = obj.Name,
                Comment = obj.Comment,
                CustomDesc = DeserializeCustomDesc(obj),
            };
        }
        private BehaveAsSakura.Tasks.ITaskDesc DeserializeCustomDesc(BehaveAsSakura__Tasks__DecoratorTaskDescWrapper obj)
        {
            switch (obj.CustomDescType)
            {

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc:
                    return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc:
                    return BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__InverterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc:
                    return BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ListenEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc:
                    return BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__LogTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc:
                    return BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__RepeaterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc:
                    return BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc:
                    return BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SendEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc:
                    return BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SequenceTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc:
                    return BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SubTreeTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc:
                    return BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilFailureDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc:
                    return BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilSuccessDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc:
                    return BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc:
                    return BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitTimerTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.NONE:
                    return null;

                default:
                    throw new NotSupportedException(obj.CustomDescType.ToString());
            }
        }
    }

    class BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer : Serializer<BehaveAsSakura.Tasks.CompositeTaskDescWrapper, BehaveAsSakura__Tasks__CompositeTaskDescWrapper>
    {
        public static readonly BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer Instance = new BehaveAsSakura__Tasks__CompositeTaskDescWrapper__Serializer();

        public override Offset<BehaveAsSakura__Tasks__CompositeTaskDescWrapper>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.CompositeTaskDescWrapper obj)
        {
            if (obj == null)
                return null;
            var vectorChildTaskIds = default(VectorOffset?);
            if (obj.ChildTaskIds != null)
                vectorChildTaskIds = BehaveAsSakura__Tasks__CompositeTaskDescWrapper.CreateChildTaskIdsVector(fbb, obj.ChildTaskIds);
            var offsetName = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Name))
                offsetName =  fbb.CreateString(obj.Name);
            var offsetComment = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Comment))
                offsetComment =  fbb.CreateString(obj.Comment);
            int offsetCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc typeCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc__UnionSerializer.Serialize(fbb, obj.CustomDesc, out offsetCustomDesc, out typeCustomDesc);
            BehaveAsSakura__Tasks__CompositeTaskDescWrapper.StartBehaveAsSakura__Tasks__CompositeTaskDescWrapper(fbb);
            if (vectorChildTaskIds.HasValue)
                BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddChildTaskIds(fbb, vectorChildTaskIds.Value);
            BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddId(fbb, obj.Id);
            if (offsetName.HasValue)
                BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddName(fbb, offsetName.Value);
            if (offsetComment.HasValue)
                BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddComment(fbb, offsetComment.Value);
            if (typeCustomDesc != BehaveAsSakura__Tasks__ITaskDesc.NONE)
            {
                BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddCustomDesc(fbb, offsetCustomDesc);
                BehaveAsSakura__Tasks__CompositeTaskDescWrapper.AddCustomDescType(fbb, typeCustomDesc);
            }
            return BehaveAsSakura__Tasks__CompositeTaskDescWrapper.EndBehaveAsSakura__Tasks__CompositeTaskDescWrapper(fbb);
        }
        protected override BehaveAsSakura__Tasks__CompositeTaskDescWrapper GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__CompositeTaskDescWrapper.GetRootAsBehaveAsSakura__Tasks__CompositeTaskDescWrapper(buffer);
        }
        public override BehaveAsSakura.Tasks.CompositeTaskDescWrapper Deserialize(BehaveAsSakura__Tasks__CompositeTaskDescWrapper obj)
        {
            return new BehaveAsSakura.Tasks.CompositeTaskDescWrapper()
            {
                ChildTaskIds = DeserializeScalar(obj.ChildTaskIdsLength, obj.ChildTaskIds),
                Id = obj.Id,
                Name = obj.Name,
                Comment = obj.Comment,
                CustomDesc = DeserializeCustomDesc(obj),
            };
        }
        private BehaveAsSakura.Tasks.ITaskDesc DeserializeCustomDesc(BehaveAsSakura__Tasks__CompositeTaskDescWrapper obj)
        {
            switch (obj.CustomDescType)
            {

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc:
                    return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc:
                    return BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__InverterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc:
                    return BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ListenEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc:
                    return BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__LogTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc:
                    return BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__RepeaterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc:
                    return BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc:
                    return BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SendEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc:
                    return BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SequenceTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc:
                    return BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SubTreeTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc:
                    return BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilFailureDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc:
                    return BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilSuccessDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc:
                    return BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc:
                    return BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitTimerTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.NONE:
                    return null;

                default:
                    throw new NotSupportedException(obj.CustomDescType.ToString());
            }
        }
    }

    class BehaveAsSakura__Tasks__InverterTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.InverterTaskDesc, BehaveAsSakura__Tasks__InverterTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__InverterTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__InverterTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__InverterTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.InverterTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__InverterTaskDesc.StartBehaveAsSakura__Tasks__InverterTaskDesc(fbb);
            return BehaveAsSakura__Tasks__InverterTaskDesc.EndBehaveAsSakura__Tasks__InverterTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__InverterTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__InverterTaskDesc.GetRootAsBehaveAsSakura__Tasks__InverterTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.InverterTaskDesc Deserialize(BehaveAsSakura__Tasks__InverterTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.InverterTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer : Serializer<BehaveAsSakura.Tasks.LeafTaskDescWrapper, BehaveAsSakura__Tasks__LeafTaskDescWrapper>
    {
        public static readonly BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer Instance = new BehaveAsSakura__Tasks__LeafTaskDescWrapper__Serializer();

        public override Offset<BehaveAsSakura__Tasks__LeafTaskDescWrapper>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.LeafTaskDescWrapper obj)
        {
            if (obj == null)
                return null;
            var offsetName = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Name))
                offsetName =  fbb.CreateString(obj.Name);
            var offsetComment = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Comment))
                offsetComment =  fbb.CreateString(obj.Comment);
            int offsetCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc typeCustomDesc;
            BehaveAsSakura__Tasks__ITaskDesc__UnionSerializer.Serialize(fbb, obj.CustomDesc, out offsetCustomDesc, out typeCustomDesc);
            BehaveAsSakura__Tasks__LeafTaskDescWrapper.StartBehaveAsSakura__Tasks__LeafTaskDescWrapper(fbb);
            BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddId(fbb, obj.Id);
            if (offsetName.HasValue)
                BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddName(fbb, offsetName.Value);
            if (offsetComment.HasValue)
                BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddComment(fbb, offsetComment.Value);
            if (typeCustomDesc != BehaveAsSakura__Tasks__ITaskDesc.NONE)
            {
                BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddCustomDesc(fbb, offsetCustomDesc);
                BehaveAsSakura__Tasks__LeafTaskDescWrapper.AddCustomDescType(fbb, typeCustomDesc);
            }
            return BehaveAsSakura__Tasks__LeafTaskDescWrapper.EndBehaveAsSakura__Tasks__LeafTaskDescWrapper(fbb);
        }
        protected override BehaveAsSakura__Tasks__LeafTaskDescWrapper GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__LeafTaskDescWrapper.GetRootAsBehaveAsSakura__Tasks__LeafTaskDescWrapper(buffer);
        }
        public override BehaveAsSakura.Tasks.LeafTaskDescWrapper Deserialize(BehaveAsSakura__Tasks__LeafTaskDescWrapper obj)
        {
            return new BehaveAsSakura.Tasks.LeafTaskDescWrapper()
            {
                Id = obj.Id,
                Name = obj.Name,
                Comment = obj.Comment,
                CustomDesc = DeserializeCustomDesc(obj),
            };
        }
        private BehaveAsSakura.Tasks.ITaskDesc DeserializeCustomDesc(BehaveAsSakura__Tasks__LeafTaskDescWrapper obj)
        {
            switch (obj.CustomDescType)
            {

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc:
                    return BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ConditionalEvaluatorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__InverterTaskDesc:
                    return BehaveAsSakura__Tasks__InverterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__InverterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ListenEventTaskDesc:
                    return BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ListenEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__LogTaskDesc:
                    return BehaveAsSakura__Tasks__LogTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__LogTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelSelectorTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ParallelTaskDesc:
                    return BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ParallelTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__RepeaterTaskDesc:
                    return BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__RepeaterTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnFailureTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__ReturnSuccessTaskDesc:
                    return BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SelectorTaskDesc:
                    return BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SelectorTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SendEventTaskDesc:
                    return BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SendEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SequenceTaskDesc:
                    return BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SequenceTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__SubTreeTaskDesc:
                    return BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__SubTreeTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilFailureDesc:
                    return BehaveAsSakura__Tasks__UntilFailureDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilFailureDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__UntilSuccessDesc:
                    return BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__UntilSuccessDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitEventTaskDesc:
                    return BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitEventTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.BehaveAsSakura__Tasks__WaitTimerTaskDesc:
                    return BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer.Instance.Deserialize(obj.CustomDesc<BehaveAsSakura__Tasks__WaitTimerTaskDesc>());

                case BehaveAsSakura__Tasks__ITaskDesc.NONE:
                    return null;

                default:
                    throw new NotSupportedException(obj.CustomDescType.ToString());
            }
        }
    }

    class BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ListenEventTaskDesc, BehaveAsSakura__Tasks__ListenEventTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ListenEventTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ListenEventTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ListenEventTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetEventType = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.EventType))
                offsetEventType =  fbb.CreateString(obj.EventType);
            BehaveAsSakura__Tasks__ListenEventTaskDesc.StartBehaveAsSakura__Tasks__ListenEventTaskDesc(fbb);
            if (offsetEventType.HasValue)
                BehaveAsSakura__Tasks__ListenEventTaskDesc.AddEventType(fbb, offsetEventType.Value);
            return BehaveAsSakura__Tasks__ListenEventTaskDesc.EndBehaveAsSakura__Tasks__ListenEventTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ListenEventTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ListenEventTaskDesc.GetRootAsBehaveAsSakura__Tasks__ListenEventTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ListenEventTaskDesc Deserialize(BehaveAsSakura__Tasks__ListenEventTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ListenEventTaskDesc()
            {
                EventType = obj.EventType,
            };
        }
    }

    class BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.ListenEventTaskProps, BehaveAsSakura__Tasks__ListenEventTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ListenEventTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ListenEventTaskProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__ListenEventTaskProps.StartBehaveAsSakura__Tasks__ListenEventTaskProps(fbb);
            BehaveAsSakura__Tasks__ListenEventTaskProps.AddIsEventTriggered(fbb, obj.IsEventTriggered);
            return BehaveAsSakura__Tasks__ListenEventTaskProps.EndBehaveAsSakura__Tasks__ListenEventTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__ListenEventTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ListenEventTaskProps.GetRootAsBehaveAsSakura__Tasks__ListenEventTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.ListenEventTaskProps Deserialize(BehaveAsSakura__Tasks__ListenEventTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.ListenEventTaskProps()
            {
                IsEventTriggered = obj.IsEventTriggered,
            };
        }
    }

    class BehaveAsSakura__Tasks__LogTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.LogTaskDesc, BehaveAsSakura__Tasks__LogTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__LogTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__LogTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__LogTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.LogTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetMessage = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Message))
                offsetMessage =  fbb.CreateString(obj.Message);
            var vectorMessageParameters = default(VectorOffset?);
            if (obj.MessageParameters != null)
            {
                var offsetsMessageParameters = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.MessageParameters);
                vectorMessageParameters = BehaveAsSakura__Tasks__LogTaskDesc.CreateMessageParametersVector(fbb, offsetsMessageParameters);
            }
            BehaveAsSakura__Tasks__LogTaskDesc.StartBehaveAsSakura__Tasks__LogTaskDesc(fbb);
            if (offsetMessage.HasValue)
                BehaveAsSakura__Tasks__LogTaskDesc.AddMessage(fbb, offsetMessage.Value);
            if (vectorMessageParameters.HasValue)
                BehaveAsSakura__Tasks__LogTaskDesc.AddMessageParameters(fbb, vectorMessageParameters.Value);
            return BehaveAsSakura__Tasks__LogTaskDesc.EndBehaveAsSakura__Tasks__LogTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__LogTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__LogTaskDesc.GetRootAsBehaveAsSakura__Tasks__LogTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.LogTaskDesc Deserialize(BehaveAsSakura__Tasks__LogTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.LogTaskDesc()
            {
                Message = obj.Message,
                MessageParameters = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.MessageParametersLength, obj.MessageParameters),
            };
        }
    }

    class BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ParallelSelectorTaskDesc, BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ParallelSelectorTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ParallelSelectorTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ParallelSelectorTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__ParallelSelectorTaskDesc.StartBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(fbb);
            return BehaveAsSakura__Tasks__ParallelSelectorTaskDesc.EndBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ParallelSelectorTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ParallelSelectorTaskDesc.GetRootAsBehaveAsSakura__Tasks__ParallelSelectorTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ParallelSelectorTaskDesc Deserialize(BehaveAsSakura__Tasks__ParallelSelectorTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ParallelSelectorTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ParallelTaskDesc, BehaveAsSakura__Tasks__ParallelTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ParallelTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ParallelTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ParallelTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__ParallelTaskDesc.StartBehaveAsSakura__Tasks__ParallelTaskDesc(fbb);
            return BehaveAsSakura__Tasks__ParallelTaskDesc.EndBehaveAsSakura__Tasks__ParallelTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ParallelTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ParallelTaskDesc.GetRootAsBehaveAsSakura__Tasks__ParallelTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ParallelTaskDesc Deserialize(BehaveAsSakura__Tasks__ParallelTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ParallelTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.RepeaterTaskDesc, BehaveAsSakura__Tasks__RepeaterTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__RepeaterTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__RepeaterTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.RepeaterTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__RepeaterTaskDesc.StartBehaveAsSakura__Tasks__RepeaterTaskDesc(fbb);
            BehaveAsSakura__Tasks__RepeaterTaskDesc.AddCount(fbb, obj.Count);
            return BehaveAsSakura__Tasks__RepeaterTaskDesc.EndBehaveAsSakura__Tasks__RepeaterTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__RepeaterTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__RepeaterTaskDesc.GetRootAsBehaveAsSakura__Tasks__RepeaterTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.RepeaterTaskDesc Deserialize(BehaveAsSakura__Tasks__RepeaterTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.RepeaterTaskDesc()
            {
                Count = obj.Count,
            };
        }
    }

    class BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.RepeaterTaskProps, BehaveAsSakura__Tasks__RepeaterTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__RepeaterTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.RepeaterTaskProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__RepeaterTaskProps.StartBehaveAsSakura__Tasks__RepeaterTaskProps(fbb);
            BehaveAsSakura__Tasks__RepeaterTaskProps.AddWaitForChildCompleted(fbb, obj.WaitForChildCompleted);
            BehaveAsSakura__Tasks__RepeaterTaskProps.AddLastUpdateTime(fbb, obj.LastUpdateTime);
            BehaveAsSakura__Tasks__RepeaterTaskProps.AddCount(fbb, obj.Count);
            return BehaveAsSakura__Tasks__RepeaterTaskProps.EndBehaveAsSakura__Tasks__RepeaterTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__RepeaterTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__RepeaterTaskProps.GetRootAsBehaveAsSakura__Tasks__RepeaterTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.RepeaterTaskProps Deserialize(BehaveAsSakura__Tasks__RepeaterTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.RepeaterTaskProps()
            {
                WaitForChildCompleted = obj.WaitForChildCompleted,
                LastUpdateTime = obj.LastUpdateTime,
                Count = obj.Count,
            };
        }
    }

    class BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ReturnFailureTaskDesc, BehaveAsSakura__Tasks__ReturnFailureTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ReturnFailureTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ReturnFailureTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ReturnFailureTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__ReturnFailureTaskDesc.StartBehaveAsSakura__Tasks__ReturnFailureTaskDesc(fbb);
            return BehaveAsSakura__Tasks__ReturnFailureTaskDesc.EndBehaveAsSakura__Tasks__ReturnFailureTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ReturnFailureTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ReturnFailureTaskDesc.GetRootAsBehaveAsSakura__Tasks__ReturnFailureTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ReturnFailureTaskDesc Deserialize(BehaveAsSakura__Tasks__ReturnFailureTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ReturnFailureTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.ReturnSuccessTaskDesc, BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__ReturnSuccessTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__ReturnSuccessTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.ReturnSuccessTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__ReturnSuccessTaskDesc.StartBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(fbb);
            return BehaveAsSakura__Tasks__ReturnSuccessTaskDesc.EndBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__ReturnSuccessTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__ReturnSuccessTaskDesc.GetRootAsBehaveAsSakura__Tasks__ReturnSuccessTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.ReturnSuccessTaskDesc Deserialize(BehaveAsSakura__Tasks__ReturnSuccessTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.ReturnSuccessTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.SelectorTaskDesc, BehaveAsSakura__Tasks__SelectorTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__SelectorTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SelectorTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SelectorTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__SelectorTaskDesc.StartBehaveAsSakura__Tasks__SelectorTaskDesc(fbb);
            return BehaveAsSakura__Tasks__SelectorTaskDesc.EndBehaveAsSakura__Tasks__SelectorTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__SelectorTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SelectorTaskDesc.GetRootAsBehaveAsSakura__Tasks__SelectorTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.SelectorTaskDesc Deserialize(BehaveAsSakura__Tasks__SelectorTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.SelectorTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.SendEventTaskDesc, BehaveAsSakura__Tasks__SendEventTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__SendEventTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SendEventTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SendEventTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetEventType = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.EventType))
                offsetEventType =  fbb.CreateString(obj.EventType);
            BehaveAsSakura__Tasks__SendEventTaskDesc.StartBehaveAsSakura__Tasks__SendEventTaskDesc(fbb);
            if (offsetEventType.HasValue)
                BehaveAsSakura__Tasks__SendEventTaskDesc.AddEventType(fbb, offsetEventType.Value);
            return BehaveAsSakura__Tasks__SendEventTaskDesc.EndBehaveAsSakura__Tasks__SendEventTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__SendEventTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SendEventTaskDesc.GetRootAsBehaveAsSakura__Tasks__SendEventTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.SendEventTaskDesc Deserialize(BehaveAsSakura__Tasks__SendEventTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.SendEventTaskDesc()
            {
                EventType = obj.EventType,
            };
        }
    }

    class BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.SequenceTaskDesc, BehaveAsSakura__Tasks__SequenceTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__SequenceTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SequenceTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SequenceTaskDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__SequenceTaskDesc.StartBehaveAsSakura__Tasks__SequenceTaskDesc(fbb);
            return BehaveAsSakura__Tasks__SequenceTaskDesc.EndBehaveAsSakura__Tasks__SequenceTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__SequenceTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SequenceTaskDesc.GetRootAsBehaveAsSakura__Tasks__SequenceTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.SequenceTaskDesc Deserialize(BehaveAsSakura__Tasks__SequenceTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.SequenceTaskDesc()
            {
            };
        }
    }

    class BehaveAsSakura__Tasks__SequenceTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.SequenceTaskProps, BehaveAsSakura__Tasks__SequenceTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__SequenceTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__SequenceTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SequenceTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SequenceTaskProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__SequenceTaskProps.StartBehaveAsSakura__Tasks__SequenceTaskProps(fbb);
            BehaveAsSakura__Tasks__SequenceTaskProps.AddCurrentChildIndex(fbb, obj.CurrentChildIndex);
            return BehaveAsSakura__Tasks__SequenceTaskProps.EndBehaveAsSakura__Tasks__SequenceTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__SequenceTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SequenceTaskProps.GetRootAsBehaveAsSakura__Tasks__SequenceTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.SequenceTaskProps Deserialize(BehaveAsSakura__Tasks__SequenceTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.SequenceTaskProps()
            {
                CurrentChildIndex = obj.CurrentChildIndex,
            };
        }
    }

    class BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.SubTreeTaskDesc, BehaveAsSakura__Tasks__SubTreeTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__SubTreeTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SubTreeTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SubTreeTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetSubTreePath = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.SubTreePath);
            BehaveAsSakura__Tasks__SubTreeTaskDesc.StartBehaveAsSakura__Tasks__SubTreeTaskDesc(fbb);
            if (offsetSubTreePath.HasValue)
                BehaveAsSakura__Tasks__SubTreeTaskDesc.AddSubTreePath(fbb, offsetSubTreePath.Value);
            return BehaveAsSakura__Tasks__SubTreeTaskDesc.EndBehaveAsSakura__Tasks__SubTreeTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__SubTreeTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SubTreeTaskDesc.GetRootAsBehaveAsSakura__Tasks__SubTreeTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.SubTreeTaskDesc Deserialize(BehaveAsSakura__Tasks__SubTreeTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.SubTreeTaskDesc()
            {
                SubTreePath = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.SubTreePath),
            };
        }
    }

    class BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.SubTreeTaskProps, BehaveAsSakura__Tasks__SubTreeTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__SubTreeTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.SubTreeTaskProps obj)
        {
            if (obj == null)
                return null;
            var offsetSubTree = BehaveAsSakura__BehaviorTreeProps__Serializer.Instance.Serialize(fbb, obj.SubTree);
            BehaveAsSakura__Tasks__SubTreeTaskProps.StartBehaveAsSakura__Tasks__SubTreeTaskProps(fbb);
            if (offsetSubTree.HasValue)
                BehaveAsSakura__Tasks__SubTreeTaskProps.AddSubTree(fbb, offsetSubTree.Value);
            return BehaveAsSakura__Tasks__SubTreeTaskProps.EndBehaveAsSakura__Tasks__SubTreeTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__SubTreeTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__SubTreeTaskProps.GetRootAsBehaveAsSakura__Tasks__SubTreeTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.SubTreeTaskProps Deserialize(BehaveAsSakura__Tasks__SubTreeTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.SubTreeTaskProps()
            {
                SubTree = BehaveAsSakura__BehaviorTreeProps__Serializer.Instance.Deserialize(obj.SubTree),
            };
        }
    }

    class BehaveAsSakura__Tasks__TaskPropsWrapper__Serializer : Serializer<BehaveAsSakura.Tasks.TaskPropsWrapper, BehaveAsSakura__Tasks__TaskPropsWrapper>
    {
        public static readonly BehaveAsSakura__Tasks__TaskPropsWrapper__Serializer Instance = new BehaveAsSakura__Tasks__TaskPropsWrapper__Serializer();

        public override Offset<BehaveAsSakura__Tasks__TaskPropsWrapper>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.TaskPropsWrapper obj)
        {
            if (obj == null)
                return null;
            var offsetSharedVariables = BehaveAsSakura__Variables__VariableSetProps__Serializer.Instance.Serialize(fbb, obj.SharedVariables);
            int offsetCustomProps;
            BehaveAsSakura__Tasks__ITaskProps typeCustomProps;
            BehaveAsSakura__Tasks__ITaskProps__UnionSerializer.Serialize(fbb, obj.CustomProps, out offsetCustomProps, out typeCustomProps);
            BehaveAsSakura__Tasks__TaskPropsWrapper.StartBehaveAsSakura__Tasks__TaskPropsWrapper(fbb);
            BehaveAsSakura__Tasks__TaskPropsWrapper.AddId(fbb, obj.Id);
            BehaveAsSakura__Tasks__TaskPropsWrapper.AddState(fbb, (BehaveAsSakura__Tasks__TaskState)(System.Byte)obj.State);
            BehaveAsSakura__Tasks__TaskPropsWrapper.AddLastResult(fbb, (BehaveAsSakura__Tasks__TaskResult)(System.Byte)obj.LastResult);
            if (offsetSharedVariables.HasValue)
                BehaveAsSakura__Tasks__TaskPropsWrapper.AddSharedVariables(fbb, offsetSharedVariables.Value);
            if (typeCustomProps != BehaveAsSakura__Tasks__ITaskProps.NONE)
            {
                BehaveAsSakura__Tasks__TaskPropsWrapper.AddCustomProps(fbb, offsetCustomProps);
                BehaveAsSakura__Tasks__TaskPropsWrapper.AddCustomPropsType(fbb, typeCustomProps);
            }
            return BehaveAsSakura__Tasks__TaskPropsWrapper.EndBehaveAsSakura__Tasks__TaskPropsWrapper(fbb);
        }
        protected override BehaveAsSakura__Tasks__TaskPropsWrapper GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__TaskPropsWrapper.GetRootAsBehaveAsSakura__Tasks__TaskPropsWrapper(buffer);
        }
        public override BehaveAsSakura.Tasks.TaskPropsWrapper Deserialize(BehaveAsSakura__Tasks__TaskPropsWrapper obj)
        {
            return new BehaveAsSakura.Tasks.TaskPropsWrapper()
            {
                Id = obj.Id,
                State = (BehaveAsSakura.Tasks.TaskState)(System.Byte)obj.State,
                LastResult = (BehaveAsSakura.Tasks.TaskResult)(System.Byte)obj.LastResult,
                SharedVariables = BehaveAsSakura__Variables__VariableSetProps__Serializer.Instance.Deserialize(obj.SharedVariables),
                CustomProps = DeserializeCustomProps(obj),
            };
        }
        private BehaveAsSakura.Tasks.ITaskProps DeserializeCustomProps(BehaveAsSakura__Tasks__TaskPropsWrapper obj)
        {
            switch (obj.CustomPropsType)
            {

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__ListenEventTaskProps:
                    return BehaveAsSakura__Tasks__ListenEventTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__ListenEventTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__RepeaterTaskProps:
                    return BehaveAsSakura__Tasks__RepeaterTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__RepeaterTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SequenceTaskProps:
                    return BehaveAsSakura__Tasks__SequenceTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__SequenceTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__SubTreeTaskProps:
                    return BehaveAsSakura__Tasks__SubTreeTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__SubTreeTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitEventTaskProps:
                    return BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__WaitEventTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.BehaveAsSakura__Tasks__WaitTimerTaskProps:
                    return BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer.Instance.Deserialize(obj.CustomProps<BehaveAsSakura__Tasks__WaitTimerTaskProps>());

                case BehaveAsSakura__Tasks__ITaskProps.NONE:
                    return null;

                default:
                    throw new NotSupportedException(obj.CustomPropsType.ToString());
            }
        }
    }

    class BehaveAsSakura__Tasks__UntilFailureDesc__Serializer : Serializer<BehaveAsSakura.Tasks.UntilFailureDesc, BehaveAsSakura__Tasks__UntilFailureDesc>
    {
        public static readonly BehaveAsSakura__Tasks__UntilFailureDesc__Serializer Instance = new BehaveAsSakura__Tasks__UntilFailureDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__UntilFailureDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.UntilFailureDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__UntilFailureDesc.StartBehaveAsSakura__Tasks__UntilFailureDesc(fbb);
            BehaveAsSakura__Tasks__UntilFailureDesc.AddCount(fbb, obj.Count);
            return BehaveAsSakura__Tasks__UntilFailureDesc.EndBehaveAsSakura__Tasks__UntilFailureDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__UntilFailureDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__UntilFailureDesc.GetRootAsBehaveAsSakura__Tasks__UntilFailureDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.UntilFailureDesc Deserialize(BehaveAsSakura__Tasks__UntilFailureDesc obj)
        {
            return new BehaveAsSakura.Tasks.UntilFailureDesc()
            {
                Count = obj.Count,
            };
        }
    }

    class BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer : Serializer<BehaveAsSakura.Tasks.UntilSuccessDesc, BehaveAsSakura__Tasks__UntilSuccessDesc>
    {
        public static readonly BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer Instance = new BehaveAsSakura__Tasks__UntilSuccessDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__UntilSuccessDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.UntilSuccessDesc obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__UntilSuccessDesc.StartBehaveAsSakura__Tasks__UntilSuccessDesc(fbb);
            BehaveAsSakura__Tasks__UntilSuccessDesc.AddCount(fbb, obj.Count);
            return BehaveAsSakura__Tasks__UntilSuccessDesc.EndBehaveAsSakura__Tasks__UntilSuccessDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__UntilSuccessDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__UntilSuccessDesc.GetRootAsBehaveAsSakura__Tasks__UntilSuccessDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.UntilSuccessDesc Deserialize(BehaveAsSakura__Tasks__UntilSuccessDesc obj)
        {
            return new BehaveAsSakura.Tasks.UntilSuccessDesc()
            {
                Count = obj.Count,
            };
        }
    }

    class BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.WaitEventTaskDesc, BehaveAsSakura__Tasks__WaitEventTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__WaitEventTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__WaitEventTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.WaitEventTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetEventType = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.EventType))
                offsetEventType =  fbb.CreateString(obj.EventType);
            BehaveAsSakura__Tasks__WaitEventTaskDesc.StartBehaveAsSakura__Tasks__WaitEventTaskDesc(fbb);
            if (offsetEventType.HasValue)
                BehaveAsSakura__Tasks__WaitEventTaskDesc.AddEventType(fbb, offsetEventType.Value);
            return BehaveAsSakura__Tasks__WaitEventTaskDesc.EndBehaveAsSakura__Tasks__WaitEventTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__WaitEventTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__WaitEventTaskDesc.GetRootAsBehaveAsSakura__Tasks__WaitEventTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.WaitEventTaskDesc Deserialize(BehaveAsSakura__Tasks__WaitEventTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.WaitEventTaskDesc()
            {
                EventType = obj.EventType,
            };
        }
    }

    class BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.WaitEventTaskProps, BehaveAsSakura__Tasks__WaitEventTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__WaitEventTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__WaitEventTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.WaitEventTaskProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__WaitEventTaskProps.StartBehaveAsSakura__Tasks__WaitEventTaskProps(fbb);
            BehaveAsSakura__Tasks__WaitEventTaskProps.AddIsEventTriggered(fbb, obj.IsEventTriggered);
            return BehaveAsSakura__Tasks__WaitEventTaskProps.EndBehaveAsSakura__Tasks__WaitEventTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__WaitEventTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__WaitEventTaskProps.GetRootAsBehaveAsSakura__Tasks__WaitEventTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.WaitEventTaskProps Deserialize(BehaveAsSakura__Tasks__WaitEventTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.WaitEventTaskProps()
            {
                IsEventTriggered = obj.IsEventTriggered,
            };
        }
    }

    class BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer : Serializer<BehaveAsSakura.Tasks.WaitTimerTaskDesc, BehaveAsSakura__Tasks__WaitTimerTaskDesc>
    {
        public static readonly BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer Instance = new BehaveAsSakura__Tasks__WaitTimerTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tasks__WaitTimerTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.WaitTimerTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetTime = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Serialize(fbb, obj.Time);
            BehaveAsSakura__Tasks__WaitTimerTaskDesc.StartBehaveAsSakura__Tasks__WaitTimerTaskDesc(fbb);
            if (offsetTime.HasValue)
                BehaveAsSakura__Tasks__WaitTimerTaskDesc.AddTime(fbb, offsetTime.Value);
            return BehaveAsSakura__Tasks__WaitTimerTaskDesc.EndBehaveAsSakura__Tasks__WaitTimerTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tasks__WaitTimerTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__WaitTimerTaskDesc.GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tasks.WaitTimerTaskDesc Deserialize(BehaveAsSakura__Tasks__WaitTimerTaskDesc obj)
        {
            return new BehaveAsSakura.Tasks.WaitTimerTaskDesc()
            {
                Time = BehaveAsSakura__Variables__VariableDesc__Serializer.Instance.Deserialize(obj.Time),
            };
        }
    }

    class BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer : Serializer<BehaveAsSakura.Tasks.WaitTimerTaskProps, BehaveAsSakura__Tasks__WaitTimerTaskProps>
    {
        public static readonly BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer Instance = new BehaveAsSakura__Tasks__WaitTimerTaskProps__Serializer();

        public override Offset<BehaveAsSakura__Tasks__WaitTimerTaskProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tasks.WaitTimerTaskProps obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Tasks__WaitTimerTaskProps.StartBehaveAsSakura__Tasks__WaitTimerTaskProps(fbb);
            BehaveAsSakura__Tasks__WaitTimerTaskProps.AddTimerId(fbb, obj.TimerId);
            BehaveAsSakura__Tasks__WaitTimerTaskProps.AddIsTimerTriggered(fbb, obj.IsTimerTriggered);
            return BehaveAsSakura__Tasks__WaitTimerTaskProps.EndBehaveAsSakura__Tasks__WaitTimerTaskProps(fbb);
        }
        protected override BehaveAsSakura__Tasks__WaitTimerTaskProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tasks__WaitTimerTaskProps.GetRootAsBehaveAsSakura__Tasks__WaitTimerTaskProps(buffer);
        }
        public override BehaveAsSakura.Tasks.WaitTimerTaskProps Deserialize(BehaveAsSakura__Tasks__WaitTimerTaskProps obj)
        {
            return new BehaveAsSakura.Tasks.WaitTimerTaskProps()
            {
                TimerId = obj.TimerId,
                IsTimerTriggered = obj.IsTimerTriggered,
            };
        }
    }

    class BehaveAsSakura__Events__SubscriptionProps__Serializer : Serializer<BehaveAsSakura.Events.SubscriptionProps, BehaveAsSakura__Events__SubscriptionProps>
    {
        public static readonly BehaveAsSakura__Events__SubscriptionProps__Serializer Instance = new BehaveAsSakura__Events__SubscriptionProps__Serializer();

        public override Offset<BehaveAsSakura__Events__SubscriptionProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Events.SubscriptionProps obj)
        {
            if (obj == null)
                return null;
            var offsetType = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Type))
                offsetType =  fbb.CreateString(obj.Type);
            var vectorTaskIds = default(VectorOffset?);
            if (obj.TaskIds != null)
                vectorTaskIds = BehaveAsSakura__Events__SubscriptionProps.CreateTaskIdsVector(fbb, obj.TaskIds);
            BehaveAsSakura__Events__SubscriptionProps.StartBehaveAsSakura__Events__SubscriptionProps(fbb);
            if (offsetType.HasValue)
                BehaveAsSakura__Events__SubscriptionProps.AddType(fbb, offsetType.Value);
            if (vectorTaskIds.HasValue)
                BehaveAsSakura__Events__SubscriptionProps.AddTaskIds(fbb, vectorTaskIds.Value);
            return BehaveAsSakura__Events__SubscriptionProps.EndBehaveAsSakura__Events__SubscriptionProps(fbb);
        }
        protected override BehaveAsSakura__Events__SubscriptionProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Events__SubscriptionProps.GetRootAsBehaveAsSakura__Events__SubscriptionProps(buffer);
        }
        public override BehaveAsSakura.Events.SubscriptionProps Deserialize(BehaveAsSakura__Events__SubscriptionProps obj)
        {
            return new BehaveAsSakura.Events.SubscriptionProps()
            {
                Type = obj.Type,
                TaskIds = DeserializeScalar(obj.TaskIdsLength, obj.TaskIds),
            };
        }
    }

    class BehaveAsSakura__Events__EventBusProps__Serializer : Serializer<BehaveAsSakura.Events.EventBusProps, BehaveAsSakura__Events__EventBusProps>
    {
        public static readonly BehaveAsSakura__Events__EventBusProps__Serializer Instance = new BehaveAsSakura__Events__EventBusProps__Serializer();

        public override Offset<BehaveAsSakura__Events__EventBusProps>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Events.EventBusProps obj)
        {
            if (obj == null)
                return null;
            var vectorEvents = default(VectorOffset?);
            if (obj.Events != null)
            {
                var offsetsEvents = BehaveAsSakura__Events__IEvent__UnionSerializer.Serialize(fbb, obj.Events);
                vectorEvents = BehaveAsSakura__Events__EventBusProps.CreateEventsVector(fbb, offsetsEvents);
            }
            var vectorSubscriptions = default(VectorOffset?);
            if (obj.Subscriptions != null)
            {
                var offsetsSubscriptions = BehaveAsSakura__Events__SubscriptionProps__Serializer.Instance.Serialize(fbb, obj.Subscriptions);
                vectorSubscriptions = BehaveAsSakura__Events__EventBusProps.CreateSubscriptionsVector(fbb, offsetsSubscriptions);
            }
            BehaveAsSakura__Events__EventBusProps.StartBehaveAsSakura__Events__EventBusProps(fbb);
            if (vectorEvents.HasValue)
                BehaveAsSakura__Events__EventBusProps.AddEvents(fbb, vectorEvents.Value);
            if (vectorSubscriptions.HasValue)
                BehaveAsSakura__Events__EventBusProps.AddSubscriptions(fbb, vectorSubscriptions.Value);
            return BehaveAsSakura__Events__EventBusProps.EndBehaveAsSakura__Events__EventBusProps(fbb);
        }
        protected override BehaveAsSakura__Events__EventBusProps GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Events__EventBusProps.GetRootAsBehaveAsSakura__Events__EventBusProps(buffer);
        }
        public override BehaveAsSakura.Events.EventBusProps Deserialize(BehaveAsSakura__Events__EventBusProps obj)
        {
            return new BehaveAsSakura.Events.EventBusProps()
            {
                Events = BehaveAsSakura__Events__IEvent__UnionSerializer.Deserialize(obj.EventsLength, obj.Events),
                Subscriptions = BehaveAsSakura__Events__SubscriptionProps__Serializer.Instance.Deserialize(obj.SubscriptionsLength, obj.Subscriptions),
            };
        }
    }

    class BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer : Serializer<BehaveAsSakura.Events.SimpleEventTriggeredEvent, BehaveAsSakura__Events__SimpleEventTriggeredEvent>
    {
        public static readonly BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer Instance = new BehaveAsSakura__Events__SimpleEventTriggeredEvent__Serializer();

        public override Offset<BehaveAsSakura__Events__SimpleEventTriggeredEvent>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Events.SimpleEventTriggeredEvent obj)
        {
            if (obj == null)
                return null;
            var offsetEventType = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.EventType))
                offsetEventType =  fbb.CreateString(obj.EventType);
            BehaveAsSakura__Events__SimpleEventTriggeredEvent.StartBehaveAsSakura__Events__SimpleEventTriggeredEvent(fbb);
            if (offsetEventType.HasValue)
                BehaveAsSakura__Events__SimpleEventTriggeredEvent.AddEventType(fbb, offsetEventType.Value);
            return BehaveAsSakura__Events__SimpleEventTriggeredEvent.EndBehaveAsSakura__Events__SimpleEventTriggeredEvent(fbb);
        }
        protected override BehaveAsSakura__Events__SimpleEventTriggeredEvent GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Events__SimpleEventTriggeredEvent.GetRootAsBehaveAsSakura__Events__SimpleEventTriggeredEvent(buffer);
        }
        public override BehaveAsSakura.Events.SimpleEventTriggeredEvent Deserialize(BehaveAsSakura__Events__SimpleEventTriggeredEvent obj)
        {
            return new BehaveAsSakura.Events.SimpleEventTriggeredEvent()
            {
                EventType = obj.EventType,
            };
        }
    }

    class BehaveAsSakura__Events__TimerTriggeredEvent__Serializer : Serializer<BehaveAsSakura.Events.TimerTriggeredEvent, BehaveAsSakura__Events__TimerTriggeredEvent>
    {
        public static readonly BehaveAsSakura__Events__TimerTriggeredEvent__Serializer Instance = new BehaveAsSakura__Events__TimerTriggeredEvent__Serializer();

        public override Offset<BehaveAsSakura__Events__TimerTriggeredEvent>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Events.TimerTriggeredEvent obj)
        {
            if (obj == null)
                return null;
            BehaveAsSakura__Events__TimerTriggeredEvent.StartBehaveAsSakura__Events__TimerTriggeredEvent(fbb);
            BehaveAsSakura__Events__TimerTriggeredEvent.AddTimerId(fbb, obj.TimerId);
            return BehaveAsSakura__Events__TimerTriggeredEvent.EndBehaveAsSakura__Events__TimerTriggeredEvent(fbb);
        }
        protected override BehaveAsSakura__Events__TimerTriggeredEvent GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Events__TimerTriggeredEvent.GetRootAsBehaveAsSakura__Events__TimerTriggeredEvent(buffer);
        }
        public override BehaveAsSakura.Events.TimerTriggeredEvent Deserialize(BehaveAsSakura__Events__TimerTriggeredEvent obj)
        {
            return new BehaveAsSakura.Events.TimerTriggeredEvent()
            {
                TimerId = obj.TimerId,
            };
        }
    }

    class BehaveAsSakura__Tests__DumpLogTaskDesc__Serializer : Serializer<BehaveAsSakura.Tests.DumpLogTaskDesc, BehaveAsSakura__Tests__DumpLogTaskDesc>
    {
        public static readonly BehaveAsSakura__Tests__DumpLogTaskDesc__Serializer Instance = new BehaveAsSakura__Tests__DumpLogTaskDesc__Serializer();

        public override Offset<BehaveAsSakura__Tests__DumpLogTaskDesc>? Serialize(FlatBufferBuilder fbb, BehaveAsSakura.Tests.DumpLogTaskDesc obj)
        {
            if (obj == null)
                return null;
            var offsetText = default(StringOffset?);
            if (!string.IsNullOrEmpty(obj.Text))
                offsetText =  fbb.CreateString(obj.Text);
            BehaveAsSakura__Tests__DumpLogTaskDesc.StartBehaveAsSakura__Tests__DumpLogTaskDesc(fbb);
            if (offsetText.HasValue)
                BehaveAsSakura__Tests__DumpLogTaskDesc.AddText(fbb, offsetText.Value);
            return BehaveAsSakura__Tests__DumpLogTaskDesc.EndBehaveAsSakura__Tests__DumpLogTaskDesc(fbb);
        }
        protected override BehaveAsSakura__Tests__DumpLogTaskDesc GetRootAs(ByteBuffer buffer)
        {
            return BehaveAsSakura__Tests__DumpLogTaskDesc.GetRootAsBehaveAsSakura__Tests__DumpLogTaskDesc(buffer);
        }
        public override BehaveAsSakura.Tests.DumpLogTaskDesc Deserialize(BehaveAsSakura__Tests__DumpLogTaskDesc obj)
        {
            return new BehaveAsSakura.Tests.DumpLogTaskDesc()
            {
                Text = obj.Text,
            };
        }
    }
}

namespace BehaveAsSakura.Serialization
{
    public static class BehaviorTreeSerializer
    {
        public static byte[] SerializeDesc(BehaviorTreeDesc desc)
        {
            return BehaveAsSakura__BehaviorTreeDesc__Serializer.Instance.Serialize(desc);
        }

        public static BehaviorTreeDesc DeserializeDesc(byte[] data)
        {
            return BehaveAsSakura__BehaviorTreeDesc__Serializer.Instance.Deserialize(data) as BehaviorTreeDesc;
        }

        public static byte[] SerializeProps(BehaviorTreeProps props)
        {
            return BehaveAsSakura__BehaviorTreeProps__Serializer.Instance.Serialize(props);
        }

        public static BehaviorTreeProps DeserializeProps(byte[] data)
        {
            return BehaveAsSakura__BehaviorTreeProps__Serializer.Instance.Deserialize(data) as BehaviorTreeProps;
        }
    }
}
